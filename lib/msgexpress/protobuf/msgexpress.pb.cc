// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgexpress.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgexpress.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MsgExpress {

namespace {

const ::google::protobuf::Descriptor* ErrMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartupApplication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartupApplication_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopBroker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopBroker_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAppInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAppInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAppStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAppStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickOffApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOffApp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestartApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestartApp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrokerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrokerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Complex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Complex_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConditionValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConditionValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConditionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConditionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleSubscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleSubscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnSubscribeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnSubscribeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComplexSubscribeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComplexSubscribeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TokenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AppStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Operator_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msgexpress_2eproto() {
  protobuf_AddDesc_msgexpress_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msgexpress.proto");
  GOOGLE_CHECK(file != NULL);
  ErrMessage_descriptor_ = file->message_type(0);
  static const int ErrMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrMessage, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrMessage, errmsg_),
  };
  ErrMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrMessage_descriptor_,
      ErrMessage::default_instance_,
      ErrMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrMessage));
  StartupApplication_descriptor_ = file->message_type(1);
  static const int StartupApplication_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupApplication, exefullname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupApplication, args_),
  };
  StartupApplication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartupApplication_descriptor_,
      StartupApplication::default_instance_,
      StartupApplication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupApplication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupApplication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartupApplication));
  StopBroker_descriptor_ = file->message_type(2);
  static const int StopBroker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopBroker, dummy_),
  };
  StopBroker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopBroker_descriptor_,
      StopBroker::default_instance_,
      StopBroker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopBroker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopBroker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopBroker));
  CommonResponse_descriptor_ = file->message_type(3);
  static const int CommonResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, msg_),
  };
  CommonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonResponse_descriptor_,
      CommonResponse::default_instance_,
      CommonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonResponse));
  LoginInfo_descriptor_ = file->message_type(4);
  static const int LoginInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, ip_),
  };
  LoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginInfo_descriptor_,
      LoginInfo::default_instance_,
      LoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginInfo));
  LoginResponse_descriptor_ = file->message_type(5);
  static const int LoginResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, brokertime_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
  Logout_descriptor_ = file->message_type(6);
  static const int Logout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, reserve_),
  };
  Logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logout_descriptor_,
      Logout::default_instance_,
      Logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logout));
  GetAppList_descriptor_ = file->message_type(7);
  static const int GetAppList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppList, serviceid_),
  };
  GetAppList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppList_descriptor_,
      GetAppList::default_instance_,
      GetAppList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppList));
  GetAppInfo_descriptor_ = file->message_type(8);
  static const int GetAppInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppInfo, addr_),
  };
  GetAppInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAppInfo_descriptor_,
      GetAppInfo::default_instance_,
      GetAppInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAppInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAppInfo));
  AppInfo_descriptor_ = file->message_type(9);
  static const int AppInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInfo, logininfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInfo, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInfo, token_),
  };
  AppInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppInfo_descriptor_,
      AppInfo::default_instance_,
      AppInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppInfo));
  UpdateAppStatus_descriptor_ = file->message_type(10);
  static const int UpdateAppStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStatus, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStatus, token_),
  };
  UpdateAppStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAppStatus_descriptor_,
      UpdateAppStatus::default_instance_,
      UpdateAppStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAppStatus));
  AppList_descriptor_ = file->message_type(11);
  static const int AppList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppList, appinfo_),
  };
  AppList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppList_descriptor_,
      AppList::default_instance_,
      AppList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppList));
  AppServerList_descriptor_ = file->message_type(12);
  static const int AppServerList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppServerList, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppServerList, addrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppServerList, ismasterslavemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppServerList, brokerismaster_),
  };
  AppServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppServerList_descriptor_,
      AppServerList::default_instance_,
      AppServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppServerList));
  KickOffApp_descriptor_ = file->message_type(13);
  static const int KickOffApp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOffApp, addr_),
  };
  KickOffApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOffApp_descriptor_,
      KickOffApp::default_instance_,
      KickOffApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOffApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOffApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOffApp));
  RestartApp_descriptor_ = file->message_type(14);
  static const int RestartApp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartApp, uuid_),
  };
  RestartApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestartApp_descriptor_,
      RestartApp::default_instance_,
      RestartApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestartApp));
  BrokerInfo_descriptor_ = file->message_type(15);
  static const int BrokerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerInfo, brokerid_),
  };
  BrokerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrokerInfo_descriptor_,
      BrokerInfo::default_instance_,
      BrokerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrokerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrokerInfo));
  HeartBeat_descriptor_ = file->message_type(16);
  static const int HeartBeat_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, topmemory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, sendqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, receivequeue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, sendrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, recvrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, sendresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, recvresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, sendpub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, recvpub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, servertime_),
  };
  HeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeat));
  HeartBeatResponse_descriptor_ = file->message_type(17);
  static const int HeartBeatResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, brokertime_),
  };
  HeartBeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatResponse_descriptor_,
      HeartBeatResponse::default_instance_,
      HeartBeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatResponse));
  Complex_descriptor_ = file->message_type(18);
  static const int Complex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Complex, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Complex, b_),
  };
  Complex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Complex_descriptor_,
      Complex::default_instance_,
      Complex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Complex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Complex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Complex));
  DataItem_descriptor_ = file->message_type(19);
  static const int DataItem_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, strval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, ival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, uival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, lval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, ulval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, fval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, dval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, bval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, rawval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, tval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, compval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, ispk_),
  };
  DataItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataItem_descriptor_,
      DataItem::default_instance_,
      DataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataItem));
  ConditionValue_descriptor_ = file->message_type(20);
  static const int ConditionValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionValue, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionValue, value_),
  };
  ConditionValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConditionValue_descriptor_,
      ConditionValue::default_instance_,
      ConditionValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConditionValue));
  ConditionItem_descriptor_ = file->message_type(21);
  static const int ConditionItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionItem, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionItem, value_),
  };
  ConditionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConditionItem_descriptor_,
      ConditionItem::default_instance_,
      ConditionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConditionItem));
  SimpleSubscription_descriptor_ = file->message_type(22);
  static const int SimpleSubscription_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSubscription, subid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSubscription, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSubscription, submsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSubscription, useraddr_),
  };
  SimpleSubscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleSubscription_descriptor_,
      SimpleSubscription::default_instance_,
      SimpleSubscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSubscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSubscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleSubscription));
  SubscribeData_descriptor_ = file->message_type(23);
  static const int SubscribeData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeData, subid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeData, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeData, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeData, excondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeData, useraddr_),
  };
  SubscribeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeData_descriptor_,
      SubscribeData::default_instance_,
      SubscribeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeData));
  UnSubscribeData_descriptor_ = file->message_type(24);
  static const int UnSubscribeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribeData, subid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribeData, useraddr_),
  };
  UnSubscribeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnSubscribeData_descriptor_,
      UnSubscribeData::default_instance_,
      UnSubscribeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnSubscribeData));
  ComplexSubscribeData_descriptor_ = file->message_type(25);
  static const int ComplexSubscribeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexSubscribeData, unsub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexSubscribeData, sub_),
  };
  ComplexSubscribeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComplexSubscribeData_descriptor_,
      ComplexSubscribeData::default_instance_,
      ComplexSubscribeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexSubscribeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexSubscribeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComplexSubscribeData));
  PublishData_descriptor_ = file->message_type(26);
  static const int PublishData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishData, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishData, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishData, subid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishData, id_),
  };
  PublishData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishData_descriptor_,
      PublishData::default_instance_,
      PublishData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishData));
  TokenInfo_descriptor_ = file->message_type(27);
  static const int TokenInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenInfo, userid_),
  };
  TokenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenInfo_descriptor_,
      TokenInfo::default_instance_,
      TokenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenInfo));
  Header_descriptor_ = file->message_type(28);
  static const int Header_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, packagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, iszip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, compratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, serialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, command_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Pack_descriptor_ = file->message_type(29);
  static const int Pack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pack, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pack, body_),
  };
  Pack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pack_descriptor_,
      Pack::default_instance_,
      Pack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pack));
  AppStatus_descriptor_ = file->enum_type(0);
  DataType_descriptor_ = file->enum_type(1);
  Operator_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msgexpress_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrMessage_descriptor_, &ErrMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartupApplication_descriptor_, &StartupApplication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopBroker_descriptor_, &StopBroker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonResponse_descriptor_, &CommonResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginInfo_descriptor_, &LoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logout_descriptor_, &Logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppList_descriptor_, &GetAppList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAppInfo_descriptor_, &GetAppInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppInfo_descriptor_, &AppInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAppStatus_descriptor_, &UpdateAppStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppList_descriptor_, &AppList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppServerList_descriptor_, &AppServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOffApp_descriptor_, &KickOffApp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestartApp_descriptor_, &RestartApp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrokerInfo_descriptor_, &BrokerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeat_descriptor_, &HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatResponse_descriptor_, &HeartBeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Complex_descriptor_, &Complex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataItem_descriptor_, &DataItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConditionValue_descriptor_, &ConditionValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConditionItem_descriptor_, &ConditionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleSubscription_descriptor_, &SimpleSubscription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeData_descriptor_, &SubscribeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnSubscribeData_descriptor_, &UnSubscribeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComplexSubscribeData_descriptor_, &ComplexSubscribeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishData_descriptor_, &PublishData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenInfo_descriptor_, &TokenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pack_descriptor_, &Pack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msgexpress_2eproto() {
  delete ErrMessage::default_instance_;
  delete ErrMessage_reflection_;
  delete StartupApplication::default_instance_;
  delete StartupApplication_reflection_;
  delete StopBroker::default_instance_;
  delete StopBroker_reflection_;
  delete CommonResponse::default_instance_;
  delete CommonResponse_reflection_;
  delete LoginInfo::default_instance_;
  delete LoginInfo_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete Logout::default_instance_;
  delete Logout_reflection_;
  delete GetAppList::default_instance_;
  delete GetAppList_reflection_;
  delete GetAppInfo::default_instance_;
  delete GetAppInfo_reflection_;
  delete AppInfo::default_instance_;
  delete AppInfo_reflection_;
  delete UpdateAppStatus::default_instance_;
  delete UpdateAppStatus_reflection_;
  delete AppList::default_instance_;
  delete AppList_reflection_;
  delete AppServerList::default_instance_;
  delete AppServerList_reflection_;
  delete KickOffApp::default_instance_;
  delete KickOffApp_reflection_;
  delete RestartApp::default_instance_;
  delete RestartApp_reflection_;
  delete BrokerInfo::default_instance_;
  delete BrokerInfo_reflection_;
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
  delete HeartBeatResponse::default_instance_;
  delete HeartBeatResponse_reflection_;
  delete Complex::default_instance_;
  delete Complex_reflection_;
  delete DataItem::default_instance_;
  delete DataItem_reflection_;
  delete ConditionValue::default_instance_;
  delete ConditionValue_reflection_;
  delete ConditionItem::default_instance_;
  delete ConditionItem_reflection_;
  delete SimpleSubscription::default_instance_;
  delete SimpleSubscription_reflection_;
  delete SubscribeData::default_instance_;
  delete SubscribeData_reflection_;
  delete UnSubscribeData::default_instance_;
  delete UnSubscribeData_reflection_;
  delete ComplexSubscribeData::default_instance_;
  delete ComplexSubscribeData_reflection_;
  delete PublishData::default_instance_;
  delete PublishData_reflection_;
  delete TokenInfo::default_instance_;
  delete TokenInfo_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Pack::default_instance_;
  delete Pack_reflection_;
}

void protobuf_AddDesc_msgexpress_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020msgexpress.proto\022\nMsgExpress\"-\n\nErrMes"
    "sage\022\017\n\007errcode\030\001 \002(\005\022\016\n\006errmsg\030\002 \002(\t\"7\n"
    "\022StartupApplication\022\023\n\013exefullname\030\001 \002(\t"
    "\022\014\n\004args\030\002 \003(\t\"\033\n\nStopBroker\022\r\n\005dummy\030\001 "
    "\001(\t\".\n\016CommonResponse\022\017\n\007retcode\030\001 \002(\005\022\013"
    "\n\003msg\030\002 \001(\t\"\204\001\n\tLoginInfo\022\014\n\004type\030\001 \001(\005\022"
    "\014\n\004name\030\002 \001(\t\022\r\n\005group\030\003 \001(\005\022\014\n\004uuid\030\004 \001"
    "(\t\022\014\n\004auth\030\005 \001(\t\022\021\n\tstarttime\030\006 \001(\003\022\021\n\ts"
    "erviceid\030\007 \003(\005\022\n\n\002ip\030\010 \001(\t\"1\n\rLoginRespo"
    "nse\022\014\n\004addr\030\001 \001(\005\022\022\n\nbrokertime\030\002 \001(\003\"\031\n"
    "\006Logout\022\017\n\007reserve\030\001 \001(\005\"\037\n\nGetAppList\022\021"
    "\n\tserviceid\030\001 \003(\005\"\032\n\nGetAppInfo\022\014\n\004addr\030"
    "\001 \002(\005\"\212\001\n\007AppInfo\022(\n\tloginInfo\030\001 \002(\0132\025.M"
    "sgExpress.LoginInfo\022\014\n\004addr\030\002 \002(\005\022\021\n\tlog"
    "intime\030\003 \001(\003\022%\n\006status\030\004 \001(\0162\025.MsgExpres"
    "s.AppStatus\022\r\n\005token\030\005 \001(\t\"U\n\017UpdateAppS"
    "tatus\022\014\n\004addr\030\001 \002(\005\022%\n\006status\030\002 \002(\0162\025.Ms"
    "gExpress.AppStatus\022\r\n\005token\030\003 \002(\t\"/\n\007App"
    "List\022$\n\007appinfo\030\001 \003(\0132\023.MsgExpress.AppIn"
    "fo\"d\n\rAppServerList\022\021\n\tserviceid\030\001 \002(\005\022\r"
    "\n\005addrs\030\002 \003(\005\022\031\n\021isMasterSlaveMode\030\003 \002(\010"
    "\022\026\n\016brokerIsMaster\030\004 \002(\010\"\032\n\nKickOffApp\022\014"
    "\n\004addr\030\001 \002(\005\"\032\n\nRestartApp\022\014\n\004uuid\030\001 \002(\t"
    "\"1\n\nBrokerInfo\022\021\n\tstarttime\030\001 \001(\003\022\020\n\010bro"
    "kerid\030\002 \001(\005\"\360\001\n\tHeartBeat\022\013\n\003cpu\030\001 \001(\005\022\021"
    "\n\ttopmemory\030\002 \001(\005\022\016\n\006memory\030\003 \001(\005\022\021\n\tsen"
    "dqueue\030\004 \001(\005\022\024\n\014receivequeue\030\005 \001(\005\022\023\n\013se"
    "ndrequest\030\006 \001(\005\022\023\n\013recvrequest\030\007 \001(\005\022\024\n\014"
    "sendresponse\030\010 \001(\005\022\024\n\014recvresponse\030\t \001(\005"
    "\022\017\n\007sendpub\030\n \001(\005\022\017\n\007recvpub\030\013 \001(\005\022\022\n\nse"
    "rvertime\030\014 \001(\003\"L\n\021HeartBeatResponse\022\017\n\007r"
    "etcode\030\001 \002(\005\022\022\n\nservertime\030\002 \001(\003\022\022\n\nbrok"
    "ertime\030\003 \001(\003\"\037\n\007Complex\022\t\n\001a\030\001 \002(\003\022\t\n\001b\030"
    "\002 \002(\014\"\220\002\n\010DataItem\022\013\n\003key\030\001 \002(\005\022\"\n\004type\030"
    "\002 \002(\0162\024.MsgExpress.DataType\022\r\n\005value\030\003 \003"
    "(\014\022\016\n\006strVal\030\004 \003(\t\022\014\n\004iVal\030\005 \003(\005\022\r\n\005uiVa"
    "l\030\006 \003(\r\022\014\n\004lVal\030\007 \003(\003\022\r\n\005ulVal\030\010 \003(\004\022\014\n\004"
    "fVal\030\t \003(\002\022\014\n\004dVal\030\n \003(\001\022\014\n\004bVal\030\013 \003(\010\022\016"
    "\n\006rawVal\030\014 \003(\014\022\014\n\004tVal\030\r \003(\004\022$\n\007compVal\030"
    "\016 \003(\0132\023.MsgExpress.Complex\022\014\n\004isPK\030\024 \001(\010"
    "\"G\n\016ConditionValue\022&\n\010operator\030\001 \002(\0162\024.M"
    "sgExpress.Operator\022\r\n\005value\030\002 \002(\014\"k\n\rCon"
    "ditionItem\022\013\n\003key\030\001 \002(\005\022\"\n\004type\030\002 \002(\0162\024."
    "MsgExpress.DataType\022)\n\005value\030\003 \003(\0132\032.Msg"
    "Express.ConditionValue\"W\n\022SimpleSubscrip"
    "tion\022\r\n\005subid\030\001 \002(\005\022\r\n\005topic\030\002 \002(\005\022\016\n\006su"
    "bmsg\030\003 \003(\014\022\023\n\010useraddr\030\004 \001(\005:\0010\"\252\001\n\rSubs"
    "cribeData\022\r\n\005subid\030\001 \002(\005\022\r\n\005topic\030\002 \002(\005\022"
    "\'\n\tcondition\030\003 \003(\0132\024.MsgExpress.DataItem"
    "\022.\n\013excondition\030\004 \003(\0132\031.MsgExpress.Condi"
    "tionItem\022\r\n\005index\030\005 \003(\005\022\023\n\010useraddr\030\006 \001("
    "\005:\0010\"5\n\017UnSubscribeData\022\r\n\005subid\030\001 \002(\005\022\023"
    "\n\010useraddr\030\002 \001(\005:\0010\"j\n\024ComplexSubscribeD"
    "ata\022*\n\005unsub\030\001 \003(\0132\033.MsgExpress.UnSubscr"
    "ibeData\022&\n\003sub\030\002 \003(\0132\031.MsgExpress.Subscr"
    "ibeData\"i\n\013PublishData\022\r\n\005topic\030\001 \002(\005\022\"\n"
    "\004item\030\002 \003(\0132\024.MsgExpress.DataItem\022\r\n\005sub"
    "id\030\003 \003(\005\022\014\n\004uuid\030\004 \001(\t\022\n\n\002id\030\005 \001(\004\"*\n\tTo"
    "kenInfo\022\r\n\005token\030\001 \002(\014\022\016\n\006userid\030\002 \002(\003\"c"
    "\n\006Header\022\023\n\013packageType\030\001 \002(\005\022\r\n\005iszip\030\002"
    " \001(\005\022\021\n\tcompratio\030\003 \001(\005\022\021\n\tserialnum\030\004 \002"
    "(\005\022\017\n\007command\030\005 \002(\005\"8\n\004Pack\022\"\n\006header\030\001 "
    "\002(\0132\022.MsgExpress.Header\022\014\n\004body\030\002 \002(\014*=\n"
    "\tAppStatus\022\010\n\004None\020\000\022\r\n\tConnected\020\001\022\013\n\007A"
    "uthing\020\002\022\n\n\006Authed\020\003*\214\001\n\010DataType\022\n\n\006STR"
    "ING\020\001\022\t\n\005INT32\020\002\022\n\n\006UINT32\020\003\022\t\n\005INT64\020\004\022"
    "\n\n\006UINT64\020\005\022\t\n\005FLOAT\020\006\022\n\n\006DOUBLE\020\007\022\014\n\010DA"
    "TETIME\020\010\022\n\n\006BINARY\020\t\022\010\n\004BOOL\020\n\022\013\n\007COMPLE"
    "X\020\013*]\n\010Operator\022\t\n\005Equal\020\001\022\014\n\010NotEqual\020\002"
    "\022\010\n\004Less\020\003\022\017\n\013LessOrEqual\020\004\022\n\n\006Bigger\020\005\022"
    "\021\n\rBiggerOrEqual\020\006B\032\n\014com.sumscopeB\nMsgE"
    "xpress", 2846);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msgexpress.proto", &protobuf_RegisterTypes);
  ErrMessage::default_instance_ = new ErrMessage();
  StartupApplication::default_instance_ = new StartupApplication();
  StopBroker::default_instance_ = new StopBroker();
  CommonResponse::default_instance_ = new CommonResponse();
  LoginInfo::default_instance_ = new LoginInfo();
  LoginResponse::default_instance_ = new LoginResponse();
  Logout::default_instance_ = new Logout();
  GetAppList::default_instance_ = new GetAppList();
  GetAppInfo::default_instance_ = new GetAppInfo();
  AppInfo::default_instance_ = new AppInfo();
  UpdateAppStatus::default_instance_ = new UpdateAppStatus();
  AppList::default_instance_ = new AppList();
  AppServerList::default_instance_ = new AppServerList();
  KickOffApp::default_instance_ = new KickOffApp();
  RestartApp::default_instance_ = new RestartApp();
  BrokerInfo::default_instance_ = new BrokerInfo();
  HeartBeat::default_instance_ = new HeartBeat();
  HeartBeatResponse::default_instance_ = new HeartBeatResponse();
  Complex::default_instance_ = new Complex();
  DataItem::default_instance_ = new DataItem();
  ConditionValue::default_instance_ = new ConditionValue();
  ConditionItem::default_instance_ = new ConditionItem();
  SimpleSubscription::default_instance_ = new SimpleSubscription();
  SubscribeData::default_instance_ = new SubscribeData();
  UnSubscribeData::default_instance_ = new UnSubscribeData();
  ComplexSubscribeData::default_instance_ = new ComplexSubscribeData();
  PublishData::default_instance_ = new PublishData();
  TokenInfo::default_instance_ = new TokenInfo();
  Header::default_instance_ = new Header();
  Pack::default_instance_ = new Pack();
  ErrMessage::default_instance_->InitAsDefaultInstance();
  StartupApplication::default_instance_->InitAsDefaultInstance();
  StopBroker::default_instance_->InitAsDefaultInstance();
  CommonResponse::default_instance_->InitAsDefaultInstance();
  LoginInfo::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  Logout::default_instance_->InitAsDefaultInstance();
  GetAppList::default_instance_->InitAsDefaultInstance();
  GetAppInfo::default_instance_->InitAsDefaultInstance();
  AppInfo::default_instance_->InitAsDefaultInstance();
  UpdateAppStatus::default_instance_->InitAsDefaultInstance();
  AppList::default_instance_->InitAsDefaultInstance();
  AppServerList::default_instance_->InitAsDefaultInstance();
  KickOffApp::default_instance_->InitAsDefaultInstance();
  RestartApp::default_instance_->InitAsDefaultInstance();
  BrokerInfo::default_instance_->InitAsDefaultInstance();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  HeartBeatResponse::default_instance_->InitAsDefaultInstance();
  Complex::default_instance_->InitAsDefaultInstance();
  DataItem::default_instance_->InitAsDefaultInstance();
  ConditionValue::default_instance_->InitAsDefaultInstance();
  ConditionItem::default_instance_->InitAsDefaultInstance();
  SimpleSubscription::default_instance_->InitAsDefaultInstance();
  SubscribeData::default_instance_->InitAsDefaultInstance();
  UnSubscribeData::default_instance_->InitAsDefaultInstance();
  ComplexSubscribeData::default_instance_->InitAsDefaultInstance();
  PublishData::default_instance_->InitAsDefaultInstance();
  TokenInfo::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  Pack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgexpress_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgexpress_2eproto {
  StaticDescriptorInitializer_msgexpress_2eproto() {
    protobuf_AddDesc_msgexpress_2eproto();
  }
} static_descriptor_initializer_msgexpress_2eproto_;
const ::google::protobuf::EnumDescriptor* AppStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppStatus_descriptor_;
}
bool AppStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Operator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operator_descriptor_;
}
bool Operator_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ErrMessage::kErrcodeFieldNumber;
const int ErrMessage::kErrmsgFieldNumber;
#endif  // !_MSC_VER

ErrMessage::ErrMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrMessage::InitAsDefaultInstance() {
}

ErrMessage::ErrMessage(const ErrMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrMessage::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrMessage::~ErrMessage() {
  SharedDtor();
}

void ErrMessage::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void ErrMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrMessage_descriptor_;
}

const ErrMessage& ErrMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

ErrMessage* ErrMessage::default_instance_ = NULL;

ErrMessage* ErrMessage::New() const {
  return new ErrMessage;
}

void ErrMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // required string errmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errcode(), output);
  }

  // required string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errcode(), target);
  }

  // required string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // required string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrMessage::MergeFrom(const ErrMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrMessage::CopyFrom(const ErrMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ErrMessage::Swap(ErrMessage* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrMessage_descriptor_;
  metadata.reflection = ErrMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartupApplication::kExefullnameFieldNumber;
const int StartupApplication::kArgsFieldNumber;
#endif  // !_MSC_VER

StartupApplication::StartupApplication()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartupApplication::InitAsDefaultInstance() {
}

StartupApplication::StartupApplication(const StartupApplication& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartupApplication::SharedCtor() {
  _cached_size_ = 0;
  exefullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartupApplication::~StartupApplication() {
  SharedDtor();
}

void StartupApplication::SharedDtor() {
  if (exefullname_ != &::google::protobuf::internal::kEmptyString) {
    delete exefullname_;
  }
  if (this != default_instance_) {
  }
}

void StartupApplication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartupApplication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartupApplication_descriptor_;
}

const StartupApplication& StartupApplication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

StartupApplication* StartupApplication::default_instance_ = NULL;

StartupApplication* StartupApplication::New() const {
  return new StartupApplication;
}

void StartupApplication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_exefullname()) {
      if (exefullname_ != &::google::protobuf::internal::kEmptyString) {
        exefullname_->clear();
      }
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartupApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string exefullname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exefullname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exefullname().data(), this->exefullname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // repeated string args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartupApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string exefullname = 1;
  if (has_exefullname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exefullname().data(), this->exefullname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->exefullname(), output);
  }

  // repeated string args = 2;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartupApplication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string exefullname = 1;
  if (has_exefullname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exefullname().data(), this->exefullname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exefullname(), target);
  }

  // repeated string args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartupApplication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string exefullname = 1;
    if (has_exefullname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exefullname());
    }

  }
  // repeated string args = 2;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartupApplication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartupApplication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartupApplication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartupApplication::MergeFrom(const StartupApplication& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exefullname()) {
      set_exefullname(from.exefullname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartupApplication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartupApplication::CopyFrom(const StartupApplication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartupApplication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartupApplication::Swap(StartupApplication* other) {
  if (other != this) {
    std::swap(exefullname_, other->exefullname_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartupApplication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartupApplication_descriptor_;
  metadata.reflection = StartupApplication_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopBroker::kDummyFieldNumber;
#endif  // !_MSC_VER

StopBroker::StopBroker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopBroker::InitAsDefaultInstance() {
}

StopBroker::StopBroker(const StopBroker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopBroker::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopBroker::~StopBroker() {
  SharedDtor();
}

void StopBroker::SharedDtor() {
  if (dummy_ != &::google::protobuf::internal::kEmptyString) {
    delete dummy_;
  }
  if (this != default_instance_) {
  }
}

void StopBroker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopBroker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopBroker_descriptor_;
}

const StopBroker& StopBroker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

StopBroker* StopBroker::default_instance_ = NULL;

StopBroker* StopBroker::New() const {
  return new StopBroker;
}

void StopBroker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dummy()) {
      if (dummy_ != &::google::protobuf::internal::kEmptyString) {
        dummy_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopBroker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dummy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dummy().data(), this->dummy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopBroker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dummy().data(), this->dummy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dummy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopBroker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dummy().data(), this->dummy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dummy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopBroker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dummy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopBroker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopBroker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopBroker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopBroker::MergeFrom(const StopBroker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopBroker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopBroker::CopyFrom(const StopBroker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopBroker::IsInitialized() const {

  return true;
}

void StopBroker::Swap(StopBroker* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopBroker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopBroker_descriptor_;
  metadata.reflection = StopBroker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonResponse::kRetcodeFieldNumber;
const int CommonResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

CommonResponse::CommonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonResponse::InitAsDefaultInstance() {
}

CommonResponse::CommonResponse(const CommonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonResponse::~CommonResponse() {
  SharedDtor();
}

void CommonResponse::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void CommonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonResponse_descriptor_;
}

const CommonResponse& CommonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

CommonResponse* CommonResponse::default_instance_ = NULL;

CommonResponse* CommonResponse::New() const {
  return new CommonResponse;
}

void CommonResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonResponse::MergeFrom(const CommonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResponse::CopyFrom(const CommonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommonResponse::Swap(CommonResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonResponse_descriptor_;
  metadata.reflection = CommonResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginInfo::kTypeFieldNumber;
const int LoginInfo::kNameFieldNumber;
const int LoginInfo::kGroupFieldNumber;
const int LoginInfo::kUuidFieldNumber;
const int LoginInfo::kAuthFieldNumber;
const int LoginInfo::kStarttimeFieldNumber;
const int LoginInfo::kServiceidFieldNumber;
const int LoginInfo::kIpFieldNumber;
#endif  // !_MSC_VER

LoginInfo::LoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginInfo::InitAsDefaultInstance() {
}

LoginInfo::LoginInfo(const LoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginInfo::~LoginInfo() {
  SharedDtor();
}

void LoginInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void LoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginInfo_descriptor_;
}

const LoginInfo& LoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

LoginInfo* LoginInfo::default_instance_ = NULL;

LoginInfo* LoginInfo::New() const {
  return new LoginInfo;
}

void LoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    group_ = 0;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_auth()) {
      if (auth_ != &::google::protobuf::internal::kEmptyString) {
        auth_->clear();
      }
    }
    starttime_ = GOOGLE_LONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  serviceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }

      // optional int32 group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // optional string uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_auth;
        break;
      }

      // optional string auth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auth().data(), this->auth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional int64 starttime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serviceid;
        break;
      }

      // repeated int32 serviceid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_serviceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_serviceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serviceid;
        if (input->ExpectTag(66)) goto parse_ip;
        break;
      }

      // optional string ip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group(), output);
  }

  // optional string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uuid(), output);
  }

  // optional string auth = 5;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->auth(), output);
  }

  // optional int64 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->starttime(), output);
  }

  // repeated int32 serviceid = 7;
  for (int i = 0; i < this->serviceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->serviceid(i), output);
  }

  // optional string ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group(), target);
  }

  // optional string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // optional string auth = 5;
  if (has_auth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->auth(), target);
  }

  // optional int64 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->starttime(), target);
  }

  // repeated int32 serviceid = 7;
  for (int i = 0; i < this->serviceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->serviceid(i), target);
  }

  // optional string ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional string uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string auth = 5;
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth());
    }

    // optional int64 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional string ip = 8;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  // repeated int32 serviceid = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->serviceid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->serviceid(i));
    }
    total_size += 1 * this->serviceid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginInfo::MergeFrom(const LoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  serviceid_.MergeFrom(from.serviceid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_auth()) {
      set_auth(from.auth());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {

  return true;
}

void LoginInfo::Swap(LoginInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(group_, other->group_);
    std::swap(uuid_, other->uuid_);
    std::swap(auth_, other->auth_);
    std::swap(starttime_, other->starttime_);
    serviceid_.Swap(&other->serviceid_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginInfo_descriptor_;
  metadata.reflection = LoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kAddrFieldNumber;
const int LoginResponse::kBrokertimeFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  addr_ = 0;
  brokertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addr_ = 0;
    brokertime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_brokertime;
        break;
      }

      // optional int64 brokertime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brokertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokertime_)));
          set_has_brokertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // optional int64 brokertime = 2;
  if (has_brokertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->brokertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // optional int64 brokertime = 2;
  if (has_brokertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->brokertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addr());
    }

    // optional int64 brokertime = 2;
    if (has_brokertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->brokertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_brokertime()) {
      set_brokertime(from.brokertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(brokertime_, other->brokertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Logout::kReserveFieldNumber;
#endif  // !_MSC_VER

Logout::Logout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Logout::InitAsDefaultInstance() {
}

Logout::Logout(const Logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logout::SharedCtor() {
  _cached_size_ = 0;
  reserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logout::~Logout() {
  SharedDtor();
}

void Logout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logout_descriptor_;
}

const Logout& Logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

Logout* Logout::default_instance_ = NULL;

Logout* Logout::New() const {
  return new Logout;
}

void Logout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserve = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserve(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reserve = 1;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reserve(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reserve = 1;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logout::IsInitialized() const {

  return true;
}

void Logout::Swap(Logout* other) {
  if (other != this) {
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logout_descriptor_;
  metadata.reflection = Logout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppList::kServiceidFieldNumber;
#endif  // !_MSC_VER

GetAppList::GetAppList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppList::InitAsDefaultInstance() {
}

GetAppList::GetAppList(const GetAppList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppList::~GetAppList() {
  SharedDtor();
}

void GetAppList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppList_descriptor_;
}

const GetAppList& GetAppList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

GetAppList* GetAppList::default_instance_ = NULL;

GetAppList* GetAppList::New() const {
  return new GetAppList;
}

void GetAppList::Clear() {
  serviceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 serviceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_serviceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_serviceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_serviceid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 serviceid = 1;
  for (int i = 0; i < this->serviceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->serviceid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 serviceid = 1;
  for (int i = 0; i < this->serviceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->serviceid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppList::ByteSize() const {
  int total_size = 0;

  // repeated int32 serviceid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->serviceid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->serviceid(i));
    }
    total_size += 1 * this->serviceid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppList::MergeFrom(const GetAppList& from) {
  GOOGLE_CHECK_NE(&from, this);
  serviceid_.MergeFrom(from.serviceid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppList::CopyFrom(const GetAppList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppList::IsInitialized() const {

  return true;
}

void GetAppList::Swap(GetAppList* other) {
  if (other != this) {
    serviceid_.Swap(&other->serviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppList_descriptor_;
  metadata.reflection = GetAppList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAppInfo::kAddrFieldNumber;
#endif  // !_MSC_VER

GetAppInfo::GetAppInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAppInfo::InitAsDefaultInstance() {
}

GetAppInfo::GetAppInfo(const GetAppInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAppInfo::SharedCtor() {
  _cached_size_ = 0;
  addr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAppInfo::~GetAppInfo() {
  SharedDtor();
}

void GetAppInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAppInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAppInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAppInfo_descriptor_;
}

const GetAppInfo& GetAppInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

GetAppInfo* GetAppInfo::default_instance_ = NULL;

GetAppInfo* GetAppInfo::New() const {
  return new GetAppInfo;
}

void GetAppInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAppInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAppInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAppInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAppInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAppInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAppInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAppInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAppInfo::MergeFrom(const GetAppInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAppInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppInfo::CopyFrom(const GetAppInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAppInfo::Swap(GetAppInfo* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAppInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAppInfo_descriptor_;
  metadata.reflection = GetAppInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppInfo::kLoginInfoFieldNumber;
const int AppInfo::kAddrFieldNumber;
const int AppInfo::kLogintimeFieldNumber;
const int AppInfo::kStatusFieldNumber;
const int AppInfo::kTokenFieldNumber;
#endif  // !_MSC_VER

AppInfo::AppInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppInfo::InitAsDefaultInstance() {
  logininfo_ = const_cast< ::MsgExpress::LoginInfo*>(&::MsgExpress::LoginInfo::default_instance());
}

AppInfo::AppInfo(const AppInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppInfo::SharedCtor() {
  _cached_size_ = 0;
  logininfo_ = NULL;
  addr_ = 0;
  logintime_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppInfo::~AppInfo() {
  SharedDtor();
}

void AppInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete logininfo_;
  }
}

void AppInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppInfo_descriptor_;
}

const AppInfo& AppInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

AppInfo* AppInfo::default_instance_ = NULL;

AppInfo* AppInfo::New() const {
  return new AppInfo;
}

void AppInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_logininfo()) {
      if (logininfo_ != NULL) logininfo_->::MsgExpress::LoginInfo::Clear();
    }
    addr_ = 0;
    logintime_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgExpress.LoginInfo loginInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logininfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addr;
        break;
      }

      // required int32 addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logintime;
        break;
      }

      // optional int64 logintime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .MsgExpress.AppStatus status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgExpress::AppStatus_IsValid(value)) {
            set_status(static_cast< ::MsgExpress::AppStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional string token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MsgExpress.LoginInfo loginInfo = 1;
  if (has_logininfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logininfo(), output);
  }

  // required int32 addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addr(), output);
  }

  // optional int64 logintime = 3;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->logintime(), output);
  }

  // optional .MsgExpress.AppStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgExpress.LoginInfo loginInfo = 1;
  if (has_logininfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logininfo(), target);
  }

  // required int32 addr = 2;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addr(), target);
  }

  // optional int64 logintime = 3;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->logintime(), target);
  }

  // optional .MsgExpress.AppStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgExpress.LoginInfo loginInfo = 1;
    if (has_logininfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logininfo());
    }

    // required int32 addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addr());
    }

    // optional int64 logintime = 3;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logintime());
    }

    // optional .MsgExpress.AppStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppInfo::MergeFrom(const AppInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logininfo()) {
      mutable_logininfo()->::MsgExpress::LoginInfo::MergeFrom(from.logininfo());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppInfo::CopyFrom(const AppInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppInfo::Swap(AppInfo* other) {
  if (other != this) {
    std::swap(logininfo_, other->logininfo_);
    std::swap(addr_, other->addr_);
    std::swap(logintime_, other->logintime_);
    std::swap(status_, other->status_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppInfo_descriptor_;
  metadata.reflection = AppInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAppStatus::kAddrFieldNumber;
const int UpdateAppStatus::kStatusFieldNumber;
const int UpdateAppStatus::kTokenFieldNumber;
#endif  // !_MSC_VER

UpdateAppStatus::UpdateAppStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateAppStatus::InitAsDefaultInstance() {
}

UpdateAppStatus::UpdateAppStatus(const UpdateAppStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateAppStatus::SharedCtor() {
  _cached_size_ = 0;
  addr_ = 0;
  status_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAppStatus::~UpdateAppStatus() {
  SharedDtor();
}

void UpdateAppStatus::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void UpdateAppStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAppStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAppStatus_descriptor_;
}

const UpdateAppStatus& UpdateAppStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

UpdateAppStatus* UpdateAppStatus::default_instance_ = NULL;

UpdateAppStatus* UpdateAppStatus::New() const {
  return new UpdateAppStatus;
}

void UpdateAppStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addr_ = 0;
    status_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAppStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .MsgExpress.AppStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgExpress::AppStatus_IsValid(value)) {
            set_status(static_cast< ::MsgExpress::AppStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateAppStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // required .MsgExpress.AppStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateAppStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // required .MsgExpress.AppStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateAppStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addr());
    }

    // required .MsgExpress.AppStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAppStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAppStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAppStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAppStatus::MergeFrom(const UpdateAppStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAppStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAppStatus::CopyFrom(const UpdateAppStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAppStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UpdateAppStatus::Swap(UpdateAppStatus* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(status_, other->status_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAppStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAppStatus_descriptor_;
  metadata.reflection = UpdateAppStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppList::kAppinfoFieldNumber;
#endif  // !_MSC_VER

AppList::AppList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppList::InitAsDefaultInstance() {
}

AppList::AppList(const AppList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppList::~AppList() {
  SharedDtor();
}

void AppList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppList_descriptor_;
}

const AppList& AppList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

AppList* AppList::default_instance_ = NULL;

AppList* AppList::New() const {
  return new AppList;
}

void AppList::Clear() {
  appinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgExpress.AppInfo appinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_appinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MsgExpress.AppInfo appinfo = 1;
  for (int i = 0; i < this->appinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->appinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgExpress.AppInfo appinfo = 1;
  for (int i = 0; i < this->appinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->appinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppList::ByteSize() const {
  int total_size = 0;

  // repeated .MsgExpress.AppInfo appinfo = 1;
  total_size += 1 * this->appinfo_size();
  for (int i = 0; i < this->appinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppList::MergeFrom(const AppList& from) {
  GOOGLE_CHECK_NE(&from, this);
  appinfo_.MergeFrom(from.appinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppList::CopyFrom(const AppList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppList::IsInitialized() const {

  for (int i = 0; i < appinfo_size(); i++) {
    if (!this->appinfo(i).IsInitialized()) return false;
  }
  return true;
}

void AppList::Swap(AppList* other) {
  if (other != this) {
    appinfo_.Swap(&other->appinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppList_descriptor_;
  metadata.reflection = AppList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppServerList::kServiceidFieldNumber;
const int AppServerList::kAddrsFieldNumber;
const int AppServerList::kIsMasterSlaveModeFieldNumber;
const int AppServerList::kBrokerIsMasterFieldNumber;
#endif  // !_MSC_VER

AppServerList::AppServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppServerList::InitAsDefaultInstance() {
}

AppServerList::AppServerList(const AppServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppServerList::SharedCtor() {
  _cached_size_ = 0;
  serviceid_ = 0;
  ismasterslavemode_ = false;
  brokerismaster_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppServerList::~AppServerList() {
  SharedDtor();
}

void AppServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppServerList_descriptor_;
}

const AppServerList& AppServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

AppServerList* AppServerList::default_instance_ = NULL;

AppServerList* AppServerList::New() const {
  return new AppServerList;
}

void AppServerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serviceid_ = 0;
    ismasterslavemode_ = false;
    brokerismaster_ = false;
  }
  addrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serviceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serviceid_)));
          set_has_serviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addrs;
        break;
      }

      // repeated int32 addrs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addrs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_addrs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_addrs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addrs;
        if (input->ExpectTag(24)) goto parse_isMasterSlaveMode;
        break;
      }

      // required bool isMasterSlaveMode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMasterSlaveMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismasterslavemode_)));
          set_has_ismasterslavemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_brokerIsMaster;
        break;
      }

      // required bool brokerIsMaster = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brokerIsMaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brokerismaster_)));
          set_has_brokerismaster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serviceid = 1;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serviceid(), output);
  }

  // repeated int32 addrs = 2;
  for (int i = 0; i < this->addrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->addrs(i), output);
  }

  // required bool isMasterSlaveMode = 3;
  if (has_ismasterslavemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ismasterslavemode(), output);
  }

  // required bool brokerIsMaster = 4;
  if (has_brokerismaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->brokerismaster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serviceid = 1;
  if (has_serviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serviceid(), target);
  }

  // repeated int32 addrs = 2;
  for (int i = 0; i < this->addrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->addrs(i), target);
  }

  // required bool isMasterSlaveMode = 3;
  if (has_ismasterslavemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ismasterslavemode(), target);
  }

  // required bool brokerIsMaster = 4;
  if (has_brokerismaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->brokerismaster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serviceid = 1;
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serviceid());
    }

    // required bool isMasterSlaveMode = 3;
    if (has_ismasterslavemode()) {
      total_size += 1 + 1;
    }

    // required bool brokerIsMaster = 4;
    if (has_brokerismaster()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 addrs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->addrs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->addrs(i));
    }
    total_size += 1 * this->addrs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppServerList::MergeFrom(const AppServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  addrs_.MergeFrom(from.addrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
    if (from.has_ismasterslavemode()) {
      set_ismasterslavemode(from.ismasterslavemode());
    }
    if (from.has_brokerismaster()) {
      set_brokerismaster(from.brokerismaster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppServerList::CopyFrom(const AppServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppServerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void AppServerList::Swap(AppServerList* other) {
  if (other != this) {
    std::swap(serviceid_, other->serviceid_);
    addrs_.Swap(&other->addrs_);
    std::swap(ismasterslavemode_, other->ismasterslavemode_);
    std::swap(brokerismaster_, other->brokerismaster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppServerList_descriptor_;
  metadata.reflection = AppServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickOffApp::kAddrFieldNumber;
#endif  // !_MSC_VER

KickOffApp::KickOffApp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickOffApp::InitAsDefaultInstance() {
}

KickOffApp::KickOffApp(const KickOffApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickOffApp::SharedCtor() {
  _cached_size_ = 0;
  addr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOffApp::~KickOffApp() {
  SharedDtor();
}

void KickOffApp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickOffApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOffApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOffApp_descriptor_;
}

const KickOffApp& KickOffApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

KickOffApp* KickOffApp::default_instance_ = NULL;

KickOffApp* KickOffApp::New() const {
  return new KickOffApp;
}

void KickOffApp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOffApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickOffApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickOffApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickOffApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOffApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOffApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOffApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOffApp::MergeFrom(const KickOffApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOffApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOffApp::CopyFrom(const KickOffApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOffApp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KickOffApp::Swap(KickOffApp* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOffApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOffApp_descriptor_;
  metadata.reflection = KickOffApp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RestartApp::kUuidFieldNumber;
#endif  // !_MSC_VER

RestartApp::RestartApp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RestartApp::InitAsDefaultInstance() {
}

RestartApp::RestartApp(const RestartApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RestartApp::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestartApp::~RestartApp() {
  SharedDtor();
}

void RestartApp::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void RestartApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestartApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestartApp_descriptor_;
}

const RestartApp& RestartApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

RestartApp* RestartApp::default_instance_ = NULL;

RestartApp* RestartApp::New() const {
  return new RestartApp;
}

void RestartApp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestartApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RestartApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RestartApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RestartApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestartApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestartApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestartApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestartApp::MergeFrom(const RestartApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestartApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartApp::CopyFrom(const RestartApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartApp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RestartApp::Swap(RestartApp* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestartApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestartApp_descriptor_;
  metadata.reflection = RestartApp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BrokerInfo::kStarttimeFieldNumber;
const int BrokerInfo::kBrokeridFieldNumber;
#endif  // !_MSC_VER

BrokerInfo::BrokerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrokerInfo::InitAsDefaultInstance() {
}

BrokerInfo::BrokerInfo(const BrokerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrokerInfo::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  brokerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrokerInfo::~BrokerInfo() {
  SharedDtor();
}

void BrokerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrokerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrokerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrokerInfo_descriptor_;
}

const BrokerInfo& BrokerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

BrokerInfo* BrokerInfo::default_instance_ = NULL;

BrokerInfo* BrokerInfo::New() const {
  return new BrokerInfo;
}

void BrokerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = GOOGLE_LONGLONG(0);
    brokerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrokerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 starttime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_brokerid;
        break;
      }

      // optional int32 brokerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brokerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brokerid_)));
          set_has_brokerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrokerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->starttime(), output);
  }

  // optional int32 brokerid = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->brokerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrokerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 starttime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->starttime(), target);
  }

  // optional int32 brokerid = 2;
  if (has_brokerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->brokerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrokerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 starttime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int32 brokerid = 2;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brokerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrokerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrokerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrokerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrokerInfo::MergeFrom(const BrokerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrokerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerInfo::CopyFrom(const BrokerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerInfo::IsInitialized() const {

  return true;
}

void BrokerInfo::Swap(BrokerInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(brokerid_, other->brokerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrokerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrokerInfo_descriptor_;
  metadata.reflection = BrokerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeat::kCpuFieldNumber;
const int HeartBeat::kTopmemoryFieldNumber;
const int HeartBeat::kMemoryFieldNumber;
const int HeartBeat::kSendqueueFieldNumber;
const int HeartBeat::kReceivequeueFieldNumber;
const int HeartBeat::kSendrequestFieldNumber;
const int HeartBeat::kRecvrequestFieldNumber;
const int HeartBeat::kSendresponseFieldNumber;
const int HeartBeat::kRecvresponseFieldNumber;
const int HeartBeat::kSendpubFieldNumber;
const int HeartBeat::kRecvpubFieldNumber;
const int HeartBeat::kServertimeFieldNumber;
#endif  // !_MSC_VER

HeartBeat::HeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeat::InitAsDefaultInstance() {
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeat::SharedCtor() {
  _cached_size_ = 0;
  cpu_ = 0;
  topmemory_ = 0;
  memory_ = 0;
  sendqueue_ = 0;
  receivequeue_ = 0;
  sendrequest_ = 0;
  recvrequest_ = 0;
  sendresponse_ = 0;
  recvresponse_ = 0;
  sendpub_ = 0;
  recvpub_ = 0;
  servertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeat::~HeartBeat() {
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New() const {
  return new HeartBeat;
}

void HeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cpu_ = 0;
    topmemory_ = 0;
    memory_ = 0;
    sendqueue_ = 0;
    receivequeue_ = 0;
    sendrequest_ = 0;
    recvrequest_ = 0;
    sendresponse_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    recvresponse_ = 0;
    sendpub_ = 0;
    recvpub_ = 0;
    servertime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cpu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_)));
          set_has_cpu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topmemory;
        break;
      }

      // optional int32 topmemory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topmemory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topmemory_)));
          set_has_topmemory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memory;
        break;
      }

      // optional int32 memory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_)));
          set_has_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sendqueue;
        break;
      }

      // optional int32 sendqueue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendqueue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendqueue_)));
          set_has_sendqueue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_receivequeue;
        break;
      }

      // optional int32 receivequeue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivequeue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receivequeue_)));
          set_has_receivequeue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sendrequest;
        break;
      }

      // optional int32 sendrequest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendrequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendrequest_)));
          set_has_sendrequest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_recvrequest;
        break;
      }

      // optional int32 recvrequest = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvrequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvrequest_)));
          set_has_recvrequest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sendresponse;
        break;
      }

      // optional int32 sendresponse = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendresponse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendresponse_)));
          set_has_sendresponse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_recvresponse;
        break;
      }

      // optional int32 recvresponse = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvresponse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvresponse_)));
          set_has_recvresponse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sendpub;
        break;
      }

      // optional int32 sendpub = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendpub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendpub_)));
          set_has_sendpub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_recvpub;
        break;
      }

      // optional int32 recvpub = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvpub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvpub_)));
          set_has_recvpub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_servertime;
        break;
      }

      // optional int64 servertime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cpu = 1;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cpu(), output);
  }

  // optional int32 topmemory = 2;
  if (has_topmemory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topmemory(), output);
  }

  // optional int32 memory = 3;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->memory(), output);
  }

  // optional int32 sendqueue = 4;
  if (has_sendqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sendqueue(), output);
  }

  // optional int32 receivequeue = 5;
  if (has_receivequeue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->receivequeue(), output);
  }

  // optional int32 sendrequest = 6;
  if (has_sendrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sendrequest(), output);
  }

  // optional int32 recvrequest = 7;
  if (has_recvrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->recvrequest(), output);
  }

  // optional int32 sendresponse = 8;
  if (has_sendresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sendresponse(), output);
  }

  // optional int32 recvresponse = 9;
  if (has_recvresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->recvresponse(), output);
  }

  // optional int32 sendpub = 10;
  if (has_sendpub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sendpub(), output);
  }

  // optional int32 recvpub = 11;
  if (has_recvpub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->recvpub(), output);
  }

  // optional int64 servertime = 12;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->servertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cpu = 1;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cpu(), target);
  }

  // optional int32 topmemory = 2;
  if (has_topmemory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topmemory(), target);
  }

  // optional int32 memory = 3;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->memory(), target);
  }

  // optional int32 sendqueue = 4;
  if (has_sendqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sendqueue(), target);
  }

  // optional int32 receivequeue = 5;
  if (has_receivequeue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->receivequeue(), target);
  }

  // optional int32 sendrequest = 6;
  if (has_sendrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sendrequest(), target);
  }

  // optional int32 recvrequest = 7;
  if (has_recvrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->recvrequest(), target);
  }

  // optional int32 sendresponse = 8;
  if (has_sendresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sendresponse(), target);
  }

  // optional int32 recvresponse = 9;
  if (has_recvresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->recvresponse(), target);
  }

  // optional int32 sendpub = 10;
  if (has_sendpub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sendpub(), target);
  }

  // optional int32 recvpub = 11;
  if (has_recvpub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->recvpub(), target);
  }

  // optional int64 servertime = 12;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->servertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cpu = 1;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpu());
    }

    // optional int32 topmemory = 2;
    if (has_topmemory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topmemory());
    }

    // optional int32 memory = 3;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memory());
    }

    // optional int32 sendqueue = 4;
    if (has_sendqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendqueue());
    }

    // optional int32 receivequeue = 5;
    if (has_receivequeue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receivequeue());
    }

    // optional int32 sendrequest = 6;
    if (has_sendrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendrequest());
    }

    // optional int32 recvrequest = 7;
    if (has_recvrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recvrequest());
    }

    // optional int32 sendresponse = 8;
    if (has_sendresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendresponse());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 recvresponse = 9;
    if (has_recvresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recvresponse());
    }

    // optional int32 sendpub = 10;
    if (has_sendpub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendpub());
    }

    // optional int32 recvpub = 11;
    if (has_recvpub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recvpub());
    }

    // optional int64 servertime = 12;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu()) {
      set_cpu(from.cpu());
    }
    if (from.has_topmemory()) {
      set_topmemory(from.topmemory());
    }
    if (from.has_memory()) {
      set_memory(from.memory());
    }
    if (from.has_sendqueue()) {
      set_sendqueue(from.sendqueue());
    }
    if (from.has_receivequeue()) {
      set_receivequeue(from.receivequeue());
    }
    if (from.has_sendrequest()) {
      set_sendrequest(from.sendrequest());
    }
    if (from.has_recvrequest()) {
      set_recvrequest(from.recvrequest());
    }
    if (from.has_sendresponse()) {
      set_sendresponse(from.sendresponse());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recvresponse()) {
      set_recvresponse(from.recvresponse());
    }
    if (from.has_sendpub()) {
      set_sendpub(from.sendpub());
    }
    if (from.has_recvpub()) {
      set_recvpub(from.recvpub());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {

  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other != this) {
    std::swap(cpu_, other->cpu_);
    std::swap(topmemory_, other->topmemory_);
    std::swap(memory_, other->memory_);
    std::swap(sendqueue_, other->sendqueue_);
    std::swap(receivequeue_, other->receivequeue_);
    std::swap(sendrequest_, other->sendrequest_);
    std::swap(recvrequest_, other->recvrequest_);
    std::swap(sendresponse_, other->sendresponse_);
    std::swap(recvresponse_, other->recvresponse_);
    std::swap(sendpub_, other->sendpub_);
    std::swap(recvpub_, other->recvpub_);
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatResponse::kRetcodeFieldNumber;
const int HeartBeatResponse::kServertimeFieldNumber;
const int HeartBeatResponse::kBrokertimeFieldNumber;
#endif  // !_MSC_VER

HeartBeatResponse::HeartBeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatResponse::InitAsDefaultInstance() {
}

HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  servertime_ = GOOGLE_LONGLONG(0);
  brokertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatResponse::~HeartBeatResponse() {
  SharedDtor();
}

void HeartBeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatResponse_descriptor_;
}

const HeartBeatResponse& HeartBeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

HeartBeatResponse* HeartBeatResponse::default_instance_ = NULL;

HeartBeatResponse* HeartBeatResponse::New() const {
  return new HeartBeatResponse;
}

void HeartBeatResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    servertime_ = GOOGLE_LONGLONG(0);
    brokertime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_servertime;
        break;
      }

      // optional int64 servertime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_brokertime;
        break;
      }

      // optional int64 brokertime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brokertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokertime_)));
          set_has_brokertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int64 servertime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->servertime(), output);
  }

  // optional int64 brokertime = 3;
  if (has_brokertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->brokertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int64 servertime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->servertime(), target);
  }

  // optional int64 brokertime = 3;
  if (has_brokertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->brokertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int64 servertime = 2;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

    // optional int64 brokertime = 3;
    if (has_brokertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->brokertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatResponse::MergeFrom(const HeartBeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_brokertime()) {
      set_brokertime(from.brokertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HeartBeatResponse::Swap(HeartBeatResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(servertime_, other->servertime_);
    std::swap(brokertime_, other->brokertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatResponse_descriptor_;
  metadata.reflection = HeartBeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Complex::kAFieldNumber;
const int Complex::kBFieldNumber;
#endif  // !_MSC_VER

Complex::Complex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Complex::InitAsDefaultInstance() {
}

Complex::Complex(const Complex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Complex::SharedCtor() {
  _cached_size_ = 0;
  a_ = GOOGLE_LONGLONG(0);
  b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Complex::~Complex() {
  SharedDtor();
}

void Complex::SharedDtor() {
  if (b_ != &::google::protobuf::internal::kEmptyString) {
    delete b_;
  }
  if (this != default_instance_) {
  }
}

void Complex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Complex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Complex_descriptor_;
}

const Complex& Complex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

Complex* Complex::default_instance_ = NULL;

Complex* Complex::New() const {
  return new Complex;
}

void Complex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = GOOGLE_LONGLONG(0);
    if (has_b()) {
      if (b_ != &::google::protobuf::internal::kEmptyString) {
        b_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Complex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // required bytes b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Complex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->a(), output);
  }

  // required bytes b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Complex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->a(), target);
  }

  // required bytes b = 2;
  if (has_b()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Complex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->a());
    }

    // required bytes b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Complex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Complex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Complex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Complex::MergeFrom(const Complex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Complex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Complex::CopyFrom(const Complex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Complex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Complex::Swap(Complex* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Complex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Complex_descriptor_;
  metadata.reflection = Complex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataItem::kKeyFieldNumber;
const int DataItem::kTypeFieldNumber;
const int DataItem::kValueFieldNumber;
const int DataItem::kStrValFieldNumber;
const int DataItem::kIValFieldNumber;
const int DataItem::kUiValFieldNumber;
const int DataItem::kLValFieldNumber;
const int DataItem::kUlValFieldNumber;
const int DataItem::kFValFieldNumber;
const int DataItem::kDValFieldNumber;
const int DataItem::kBValFieldNumber;
const int DataItem::kRawValFieldNumber;
const int DataItem::kTValFieldNumber;
const int DataItem::kCompValFieldNumber;
const int DataItem::kIsPKFieldNumber;
#endif  // !_MSC_VER

DataItem::DataItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataItem::InitAsDefaultInstance() {
}

DataItem::DataItem(const DataItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataItem::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  type_ = 1;
  ispk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataItem::~DataItem() {
  SharedDtor();
}

void DataItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataItem_descriptor_;
}

const DataItem& DataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

DataItem* DataItem::default_instance_ = NULL;

DataItem* DataItem::New() const {
  return new DataItem;
}

void DataItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    type_ = 1;
  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    ispk_ = false;
  }
  value_.Clear();
  strval_.Clear();
  ival_.Clear();
  uival_.Clear();
  lval_.Clear();
  ulval_.Clear();
  fval_.Clear();
  dval_.Clear();
  bval_.Clear();
  rawval_.Clear();
  tval_.Clear();
  compval_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .MsgExpress.DataType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgExpress::DataType_IsValid(value)) {
            set_type(static_cast< ::MsgExpress::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated bytes value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        if (input->ExpectTag(34)) goto parse_strVal;
        break;
      }

      // repeated string strVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strval(this->strval_size() - 1).data(),
            this->strval(this->strval_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strVal;
        if (input->ExpectTag(40)) goto parse_iVal;
        break;
      }

      // repeated int32 iVal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_ival())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ival())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iVal;
        if (input->ExpectTag(48)) goto parse_uiVal;
        break;
      }

      // repeated uint32 uiVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_uival())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uival())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiVal;
        if (input->ExpectTag(56)) goto parse_lVal;
        break;
      }

      // repeated int64 lVal = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_lval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_lval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lVal;
        if (input->ExpectTag(64)) goto parse_ulVal;
        break;
      }

      // repeated uint64 ulVal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ulVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_ulval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ulval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ulVal;
        if (input->ExpectTag(77)) goto parse_fVal;
        break;
      }

      // repeated float fVal = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_fval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_fVal;
        if (input->ExpectTag(81)) goto parse_dVal;
        break;
      }

      // repeated double dVal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_dval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_dVal;
        if (input->ExpectTag(88)) goto parse_bVal;
        break;
      }

      // repeated bool bVal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 88, input, this->mutable_bval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bVal;
        if (input->ExpectTag(98)) goto parse_rawVal;
        break;
      }

      // repeated bytes rawVal = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rawVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_rawval()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_rawVal;
        if (input->ExpectTag(104)) goto parse_tVal;
        break;
      }

      // repeated uint64 tVal = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 104, input, this->mutable_tval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tVal;
        if (input->ExpectTag(114)) goto parse_compVal;
        break;
      }

      // repeated .MsgExpress.Complex compVal = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compval()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_compVal;
        if (input->ExpectTag(160)) goto parse_isPK;
        break;
      }

      // optional bool isPK = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispk_)));
          set_has_ispk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required .MsgExpress.DataType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated bytes value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(i), output);
  }

  // repeated string strVal = 4;
  for (int i = 0; i < this->strval_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->strval(i).data(), this->strval(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strval(i), output);
  }

  // repeated int32 iVal = 5;
  for (int i = 0; i < this->ival_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->ival(i), output);
  }

  // repeated uint32 uiVal = 6;
  for (int i = 0; i < this->uival_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->uival(i), output);
  }

  // repeated int64 lVal = 7;
  for (int i = 0; i < this->lval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->lval(i), output);
  }

  // repeated uint64 ulVal = 8;
  for (int i = 0; i < this->ulval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->ulval(i), output);
  }

  // repeated float fVal = 9;
  for (int i = 0; i < this->fval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->fval(i), output);
  }

  // repeated double dVal = 10;
  for (int i = 0; i < this->dval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->dval(i), output);
  }

  // repeated bool bVal = 11;
  for (int i = 0; i < this->bval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      11, this->bval(i), output);
  }

  // repeated bytes rawVal = 12;
  for (int i = 0; i < this->rawval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->rawval(i), output);
  }

  // repeated uint64 tVal = 13;
  for (int i = 0; i < this->tval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      13, this->tval(i), output);
  }

  // repeated .MsgExpress.Complex compVal = 14;
  for (int i = 0; i < this->compval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->compval(i), output);
  }

  // optional bool isPK = 20;
  if (has_ispk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->ispk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required .MsgExpress.DataType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated bytes value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->value(i), target);
  }

  // repeated string strVal = 4;
  for (int i = 0; i < this->strval_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strval(i).data(), this->strval(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->strval(i), target);
  }

  // repeated int32 iVal = 5;
  for (int i = 0; i < this->ival_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->ival(i), target);
  }

  // repeated uint32 uiVal = 6;
  for (int i = 0; i < this->uival_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->uival(i), target);
  }

  // repeated int64 lVal = 7;
  for (int i = 0; i < this->lval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->lval(i), target);
  }

  // repeated uint64 ulVal = 8;
  for (int i = 0; i < this->ulval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->ulval(i), target);
  }

  // repeated float fVal = 9;
  for (int i = 0; i < this->fval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->fval(i), target);
  }

  // repeated double dVal = 10;
  for (int i = 0; i < this->dval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->dval(i), target);
  }

  // repeated bool bVal = 11;
  for (int i = 0; i < this->bval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(11, this->bval(i), target);
  }

  // repeated bytes rawVal = 12;
  for (int i = 0; i < this->rawval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(12, this->rawval(i), target);
  }

  // repeated uint64 tVal = 13;
  for (int i = 0; i < this->tval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(13, this->tval(i), target);
  }

  // repeated .MsgExpress.Complex compVal = 14;
  for (int i = 0; i < this->compval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->compval(i), target);
  }

  // optional bool isPK = 20;
  if (has_ispk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->ispk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required .MsgExpress.DataType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional bool isPK = 20;
    if (has_ispk()) {
      total_size += 2 + 1;
    }

  }
  // repeated bytes value = 3;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  // repeated string strVal = 4;
  total_size += 1 * this->strval_size();
  for (int i = 0; i < this->strval_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strval(i));
  }

  // repeated int32 iVal = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->ival_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ival(i));
    }
    total_size += 1 * this->ival_size() + data_size;
  }

  // repeated uint32 uiVal = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->uival_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uival(i));
    }
    total_size += 1 * this->uival_size() + data_size;
  }

  // repeated int64 lVal = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->lval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->lval(i));
    }
    total_size += 1 * this->lval_size() + data_size;
  }

  // repeated uint64 ulVal = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->ulval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ulval(i));
    }
    total_size += 1 * this->ulval_size() + data_size;
  }

  // repeated float fVal = 9;
  {
    int data_size = 0;
    data_size = 4 * this->fval_size();
    total_size += 1 * this->fval_size() + data_size;
  }

  // repeated double dVal = 10;
  {
    int data_size = 0;
    data_size = 8 * this->dval_size();
    total_size += 1 * this->dval_size() + data_size;
  }

  // repeated bool bVal = 11;
  {
    int data_size = 0;
    data_size = 1 * this->bval_size();
    total_size += 1 * this->bval_size() + data_size;
  }

  // repeated bytes rawVal = 12;
  total_size += 1 * this->rawval_size();
  for (int i = 0; i < this->rawval_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->rawval(i));
  }

  // repeated uint64 tVal = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->tval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tval(i));
    }
    total_size += 1 * this->tval_size() + data_size;
  }

  // repeated .MsgExpress.Complex compVal = 14;
  total_size += 1 * this->compval_size();
  for (int i = 0; i < this->compval_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->compval(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataItem::MergeFrom(const DataItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  strval_.MergeFrom(from.strval_);
  ival_.MergeFrom(from.ival_);
  uival_.MergeFrom(from.uival_);
  lval_.MergeFrom(from.lval_);
  ulval_.MergeFrom(from.ulval_);
  fval_.MergeFrom(from.fval_);
  dval_.MergeFrom(from.dval_);
  bval_.MergeFrom(from.bval_);
  rawval_.MergeFrom(from.rawval_);
  tval_.MergeFrom(from.tval_);
  compval_.MergeFrom(from.compval_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_ispk()) {
      set_ispk(from.ispk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataItem::CopyFrom(const DataItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < compval_size(); i++) {
    if (!this->compval(i).IsInitialized()) return false;
  }
  return true;
}

void DataItem::Swap(DataItem* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(type_, other->type_);
    value_.Swap(&other->value_);
    strval_.Swap(&other->strval_);
    ival_.Swap(&other->ival_);
    uival_.Swap(&other->uival_);
    lval_.Swap(&other->lval_);
    ulval_.Swap(&other->ulval_);
    fval_.Swap(&other->fval_);
    dval_.Swap(&other->dval_);
    bval_.Swap(&other->bval_);
    rawval_.Swap(&other->rawval_);
    tval_.Swap(&other->tval_);
    compval_.Swap(&other->compval_);
    std::swap(ispk_, other->ispk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataItem_descriptor_;
  metadata.reflection = DataItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConditionValue::kOperatorFieldNumber;
const int ConditionValue::kValueFieldNumber;
#endif  // !_MSC_VER

ConditionValue::ConditionValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConditionValue::InitAsDefaultInstance() {
}

ConditionValue::ConditionValue(const ConditionValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConditionValue::SharedCtor() {
  _cached_size_ = 0;
  operator__ = 1;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConditionValue::~ConditionValue() {
  SharedDtor();
}

void ConditionValue::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ConditionValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConditionValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConditionValue_descriptor_;
}

const ConditionValue& ConditionValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

ConditionValue* ConditionValue::default_instance_ = NULL;

ConditionValue* ConditionValue::New() const {
  return new ConditionValue;
}

void ConditionValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operator__ = 1;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConditionValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgExpress.Operator operator = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgExpress::Operator_IsValid(value)) {
            set_operator_(static_cast< ::MsgExpress::Operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConditionValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MsgExpress.Operator operator = 1;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operator_(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConditionValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgExpress.Operator operator = 1;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operator_(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConditionValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgExpress.Operator operator = 1;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConditionValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConditionValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConditionValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConditionValue::MergeFrom(const ConditionValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConditionValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionValue::CopyFrom(const ConditionValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConditionValue::Swap(ConditionValue* other) {
  if (other != this) {
    std::swap(operator__, other->operator__);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConditionValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConditionValue_descriptor_;
  metadata.reflection = ConditionValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConditionItem::kKeyFieldNumber;
const int ConditionItem::kTypeFieldNumber;
const int ConditionItem::kValueFieldNumber;
#endif  // !_MSC_VER

ConditionItem::ConditionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConditionItem::InitAsDefaultInstance() {
}

ConditionItem::ConditionItem(const ConditionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConditionItem::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConditionItem::~ConditionItem() {
  SharedDtor();
}

void ConditionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConditionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConditionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConditionItem_descriptor_;
}

const ConditionItem& ConditionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

ConditionItem* ConditionItem::default_instance_ = NULL;

ConditionItem* ConditionItem::New() const {
  return new ConditionItem;
}

void ConditionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    type_ = 1;
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConditionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .MsgExpress.DataType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgExpress::DataType_IsValid(value)) {
            set_type(static_cast< ::MsgExpress::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // repeated .MsgExpress.ConditionValue value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConditionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required .MsgExpress.DataType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .MsgExpress.ConditionValue value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConditionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required .MsgExpress.DataType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .MsgExpress.ConditionValue value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConditionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required .MsgExpress.DataType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .MsgExpress.ConditionValue value = 3;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConditionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConditionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConditionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConditionItem::MergeFrom(const ConditionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConditionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionItem::CopyFrom(const ConditionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < value_size(); i++) {
    if (!this->value(i).IsInitialized()) return false;
  }
  return true;
}

void ConditionItem::Swap(ConditionItem* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(type_, other->type_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConditionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConditionItem_descriptor_;
  metadata.reflection = ConditionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleSubscription::kSubidFieldNumber;
const int SimpleSubscription::kTopicFieldNumber;
const int SimpleSubscription::kSubmsgFieldNumber;
const int SimpleSubscription::kUseraddrFieldNumber;
#endif  // !_MSC_VER

SimpleSubscription::SimpleSubscription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleSubscription::InitAsDefaultInstance() {
}

SimpleSubscription::SimpleSubscription(const SimpleSubscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleSubscription::SharedCtor() {
  _cached_size_ = 0;
  subid_ = 0;
  topic_ = 0;
  useraddr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleSubscription::~SimpleSubscription() {
  SharedDtor();
}

void SimpleSubscription::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleSubscription_descriptor_;
}

const SimpleSubscription& SimpleSubscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

SimpleSubscription* SimpleSubscription::default_instance_ = NULL;

SimpleSubscription* SimpleSubscription::New() const {
  return new SimpleSubscription;
}

void SimpleSubscription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subid_ = 0;
    topic_ = 0;
    useraddr_ = 0;
  }
  submsg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 subid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subid_)));
          set_has_subid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topic;
        break;
      }

      // required int32 topic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topic_)));
          set_has_topic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_submsg;
        break;
      }

      // repeated bytes submsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_submsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_submsg;
        if (input->ExpectTag(32)) goto parse_useraddr;
        break;
      }

      // optional int32 useraddr = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useraddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useraddr_)));
          set_has_useraddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimpleSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 subid = 1;
  if (has_subid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->subid(), output);
  }

  // required int32 topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topic(), output);
  }

  // repeated bytes submsg = 3;
  for (int i = 0; i < this->submsg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->submsg(i), output);
  }

  // optional int32 useraddr = 4 [default = 0];
  if (has_useraddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->useraddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleSubscription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 subid = 1;
  if (has_subid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->subid(), target);
  }

  // required int32 topic = 2;
  if (has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topic(), target);
  }

  // repeated bytes submsg = 3;
  for (int i = 0; i < this->submsg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->submsg(i), target);
  }

  // optional int32 useraddr = 4 [default = 0];
  if (has_useraddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->useraddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleSubscription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 subid = 1;
    if (has_subid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subid());
    }

    // required int32 topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topic());
    }

    // optional int32 useraddr = 4 [default = 0];
    if (has_useraddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useraddr());
    }

  }
  // repeated bytes submsg = 3;
  total_size += 1 * this->submsg_size();
  for (int i = 0; i < this->submsg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->submsg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleSubscription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleSubscription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleSubscription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleSubscription::MergeFrom(const SimpleSubscription& from) {
  GOOGLE_CHECK_NE(&from, this);
  submsg_.MergeFrom(from.submsg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subid()) {
      set_subid(from.subid());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_useraddr()) {
      set_useraddr(from.useraddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleSubscription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleSubscription::CopyFrom(const SimpleSubscription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleSubscription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SimpleSubscription::Swap(SimpleSubscription* other) {
  if (other != this) {
    std::swap(subid_, other->subid_);
    std::swap(topic_, other->topic_);
    submsg_.Swap(&other->submsg_);
    std::swap(useraddr_, other->useraddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleSubscription_descriptor_;
  metadata.reflection = SimpleSubscription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscribeData::kSubidFieldNumber;
const int SubscribeData::kTopicFieldNumber;
const int SubscribeData::kConditionFieldNumber;
const int SubscribeData::kExconditionFieldNumber;
const int SubscribeData::kIndexFieldNumber;
const int SubscribeData::kUseraddrFieldNumber;
#endif  // !_MSC_VER

SubscribeData::SubscribeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscribeData::InitAsDefaultInstance() {
}

SubscribeData::SubscribeData(const SubscribeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscribeData::SharedCtor() {
  _cached_size_ = 0;
  subid_ = 0;
  topic_ = 0;
  useraddr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeData::~SubscribeData() {
  SharedDtor();
}

void SubscribeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeData_descriptor_;
}

const SubscribeData& SubscribeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

SubscribeData* SubscribeData::default_instance_ = NULL;

SubscribeData* SubscribeData::New() const {
  return new SubscribeData;
}

void SubscribeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subid_ = 0;
    topic_ = 0;
    useraddr_ = 0;
  }
  condition_.Clear();
  excondition_.Clear();
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 subid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subid_)));
          set_has_subid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topic;
        break;
      }

      // required int32 topic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topic_)));
          set_has_topic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_condition;
        break;
      }

      // repeated .MsgExpress.DataItem condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_condition;
        if (input->ExpectTag(34)) goto parse_excondition;
        break;
      }

      // repeated .MsgExpress.ConditionItem excondition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_excondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_excondition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_excondition;
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // repeated int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        if (input->ExpectTag(48)) goto parse_useraddr;
        break;
      }

      // optional int32 useraddr = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useraddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useraddr_)));
          set_has_useraddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscribeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 subid = 1;
  if (has_subid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->subid(), output);
  }

  // required int32 topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topic(), output);
  }

  // repeated .MsgExpress.DataItem condition = 3;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->condition(i), output);
  }

  // repeated .MsgExpress.ConditionItem excondition = 4;
  for (int i = 0; i < this->excondition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->excondition(i), output);
  }

  // repeated int32 index = 5;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->index(i), output);
  }

  // optional int32 useraddr = 6 [default = 0];
  if (has_useraddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->useraddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscribeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 subid = 1;
  if (has_subid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->subid(), target);
  }

  // required int32 topic = 2;
  if (has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topic(), target);
  }

  // repeated .MsgExpress.DataItem condition = 3;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->condition(i), target);
  }

  // repeated .MsgExpress.ConditionItem excondition = 4;
  for (int i = 0; i < this->excondition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->excondition(i), target);
  }

  // repeated int32 index = 5;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->index(i), target);
  }

  // optional int32 useraddr = 6 [default = 0];
  if (has_useraddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->useraddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscribeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 subid = 1;
    if (has_subid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subid());
    }

    // required int32 topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topic());
    }

    // optional int32 useraddr = 6 [default = 0];
    if (has_useraddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useraddr());
    }

  }
  // repeated .MsgExpress.DataItem condition = 3;
  total_size += 1 * this->condition_size();
  for (int i = 0; i < this->condition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->condition(i));
  }

  // repeated .MsgExpress.ConditionItem excondition = 4;
  total_size += 1 * this->excondition_size();
  for (int i = 0; i < this->excondition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->excondition(i));
  }

  // repeated int32 index = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeData::MergeFrom(const SubscribeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  condition_.MergeFrom(from.condition_);
  excondition_.MergeFrom(from.excondition_);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subid()) {
      set_subid(from.subid());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_useraddr()) {
      set_useraddr(from.useraddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeData::CopyFrom(const SubscribeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < condition_size(); i++) {
    if (!this->condition(i).IsInitialized()) return false;
  }
  for (int i = 0; i < excondition_size(); i++) {
    if (!this->excondition(i).IsInitialized()) return false;
  }
  return true;
}

void SubscribeData::Swap(SubscribeData* other) {
  if (other != this) {
    std::swap(subid_, other->subid_);
    std::swap(topic_, other->topic_);
    condition_.Swap(&other->condition_);
    excondition_.Swap(&other->excondition_);
    index_.Swap(&other->index_);
    std::swap(useraddr_, other->useraddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeData_descriptor_;
  metadata.reflection = SubscribeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnSubscribeData::kSubidFieldNumber;
const int UnSubscribeData::kUseraddrFieldNumber;
#endif  // !_MSC_VER

UnSubscribeData::UnSubscribeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnSubscribeData::InitAsDefaultInstance() {
}

UnSubscribeData::UnSubscribeData(const UnSubscribeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnSubscribeData::SharedCtor() {
  _cached_size_ = 0;
  subid_ = 0;
  useraddr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnSubscribeData::~UnSubscribeData() {
  SharedDtor();
}

void UnSubscribeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnSubscribeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnSubscribeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnSubscribeData_descriptor_;
}

const UnSubscribeData& UnSubscribeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

UnSubscribeData* UnSubscribeData::default_instance_ = NULL;

UnSubscribeData* UnSubscribeData::New() const {
  return new UnSubscribeData;
}

void UnSubscribeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subid_ = 0;
    useraddr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnSubscribeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 subid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subid_)));
          set_has_subid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useraddr;
        break;
      }

      // optional int32 useraddr = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useraddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useraddr_)));
          set_has_useraddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnSubscribeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 subid = 1;
  if (has_subid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->subid(), output);
  }

  // optional int32 useraddr = 2 [default = 0];
  if (has_useraddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->useraddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnSubscribeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 subid = 1;
  if (has_subid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->subid(), target);
  }

  // optional int32 useraddr = 2 [default = 0];
  if (has_useraddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->useraddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnSubscribeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 subid = 1;
    if (has_subid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subid());
    }

    // optional int32 useraddr = 2 [default = 0];
    if (has_useraddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useraddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnSubscribeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnSubscribeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnSubscribeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnSubscribeData::MergeFrom(const UnSubscribeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subid()) {
      set_subid(from.subid());
    }
    if (from.has_useraddr()) {
      set_useraddr(from.useraddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnSubscribeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnSubscribeData::CopyFrom(const UnSubscribeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnSubscribeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UnSubscribeData::Swap(UnSubscribeData* other) {
  if (other != this) {
    std::swap(subid_, other->subid_);
    std::swap(useraddr_, other->useraddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnSubscribeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnSubscribeData_descriptor_;
  metadata.reflection = UnSubscribeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComplexSubscribeData::kUnsubFieldNumber;
const int ComplexSubscribeData::kSubFieldNumber;
#endif  // !_MSC_VER

ComplexSubscribeData::ComplexSubscribeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComplexSubscribeData::InitAsDefaultInstance() {
}

ComplexSubscribeData::ComplexSubscribeData(const ComplexSubscribeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComplexSubscribeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComplexSubscribeData::~ComplexSubscribeData() {
  SharedDtor();
}

void ComplexSubscribeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComplexSubscribeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexSubscribeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexSubscribeData_descriptor_;
}

const ComplexSubscribeData& ComplexSubscribeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

ComplexSubscribeData* ComplexSubscribeData::default_instance_ = NULL;

ComplexSubscribeData* ComplexSubscribeData::New() const {
  return new ComplexSubscribeData;
}

void ComplexSubscribeData::Clear() {
  unsub_.Clear();
  sub_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComplexSubscribeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgExpress.UnSubscribeData unsub = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unsub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unsub()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_unsub;
        if (input->ExpectTag(18)) goto parse_sub;
        break;
      }

      // repeated .MsgExpress.SubscribeData sub = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sub;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComplexSubscribeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MsgExpress.UnSubscribeData unsub = 1;
  for (int i = 0; i < this->unsub_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unsub(i), output);
  }

  // repeated .MsgExpress.SubscribeData sub = 2;
  for (int i = 0; i < this->sub_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sub(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComplexSubscribeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgExpress.UnSubscribeData unsub = 1;
  for (int i = 0; i < this->unsub_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unsub(i), target);
  }

  // repeated .MsgExpress.SubscribeData sub = 2;
  for (int i = 0; i < this->sub_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sub(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComplexSubscribeData::ByteSize() const {
  int total_size = 0;

  // repeated .MsgExpress.UnSubscribeData unsub = 1;
  total_size += 1 * this->unsub_size();
  for (int i = 0; i < this->unsub_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unsub(i));
  }

  // repeated .MsgExpress.SubscribeData sub = 2;
  total_size += 1 * this->sub_size();
  for (int i = 0; i < this->sub_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexSubscribeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComplexSubscribeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComplexSubscribeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComplexSubscribeData::MergeFrom(const ComplexSubscribeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  unsub_.MergeFrom(from.unsub_);
  sub_.MergeFrom(from.sub_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComplexSubscribeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexSubscribeData::CopyFrom(const ComplexSubscribeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexSubscribeData::IsInitialized() const {

  for (int i = 0; i < unsub_size(); i++) {
    if (!this->unsub(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sub_size(); i++) {
    if (!this->sub(i).IsInitialized()) return false;
  }
  return true;
}

void ComplexSubscribeData::Swap(ComplexSubscribeData* other) {
  if (other != this) {
    unsub_.Swap(&other->unsub_);
    sub_.Swap(&other->sub_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComplexSubscribeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComplexSubscribeData_descriptor_;
  metadata.reflection = ComplexSubscribeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublishData::kTopicFieldNumber;
const int PublishData::kItemFieldNumber;
const int PublishData::kSubidFieldNumber;
const int PublishData::kUuidFieldNumber;
const int PublishData::kIdFieldNumber;
#endif  // !_MSC_VER

PublishData::PublishData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublishData::InitAsDefaultInstance() {
}

PublishData::PublishData(const PublishData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublishData::SharedCtor() {
  _cached_size_ = 0;
  topic_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishData::~PublishData() {
  SharedDtor();
}

void PublishData::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void PublishData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishData_descriptor_;
}

const PublishData& PublishData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

PublishData* PublishData::default_instance_ = NULL;

PublishData* PublishData::New() const {
  return new PublishData;
}

void PublishData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    topic_ = 0;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    id_ = GOOGLE_ULONGLONG(0);
  }
  item_.Clear();
  subid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 topic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topic_)));
          set_has_topic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .MsgExpress.DataItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_subid;
        break;
      }

      // repeated int32 subid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_subid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_subid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subid;
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // optional string uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional uint64 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublishData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->topic(), output);
  }

  // repeated .MsgExpress.DataItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // repeated int32 subid = 3;
  for (int i = 0; i < this->subid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->subid(i), output);
  }

  // optional string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uuid(), output);
  }

  // optional uint64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublishData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 topic = 1;
  if (has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->topic(), target);
  }

  // repeated .MsgExpress.DataItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // repeated int32 subid = 3;
  for (int i = 0; i < this->subid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->subid(i), target);
  }

  // optional string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // optional uint64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublishData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 topic = 1;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topic());
    }

    // optional string uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional uint64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .MsgExpress.DataItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated int32 subid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->subid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->subid(i));
    }
    total_size += 1 * this->subid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishData::MergeFrom(const PublishData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  subid_.MergeFrom(from.subid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishData::CopyFrom(const PublishData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void PublishData::Swap(PublishData* other) {
  if (other != this) {
    std::swap(topic_, other->topic_);
    item_.Swap(&other->item_);
    subid_.Swap(&other->subid_);
    std::swap(uuid_, other->uuid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishData_descriptor_;
  metadata.reflection = PublishData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TokenInfo::kTokenFieldNumber;
const int TokenInfo::kUseridFieldNumber;
#endif  // !_MSC_VER

TokenInfo::TokenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TokenInfo::InitAsDefaultInstance() {
}

TokenInfo::TokenInfo(const TokenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TokenInfo::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenInfo::~TokenInfo() {
  SharedDtor();
}

void TokenInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void TokenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenInfo_descriptor_;
}

const TokenInfo& TokenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

TokenInfo* TokenInfo::default_instance_ = NULL;

TokenInfo* TokenInfo::New() const {
  return new TokenInfo;
}

void TokenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    userid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // required int64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TokenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->token(), output);
  }

  // required int64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TokenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes token = 1;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->token(), target);
  }

  // required int64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TokenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // required int64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenInfo::MergeFrom(const TokenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenInfo::CopyFrom(const TokenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TokenInfo::Swap(TokenInfo* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenInfo_descriptor_;
  metadata.reflection = TokenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Header::kPackageTypeFieldNumber;
const int Header::kIszipFieldNumber;
const int Header::kCompratioFieldNumber;
const int Header::kSerialnumFieldNumber;
const int Header::kCommandFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  packagetype_ = 0;
  iszip_ = 0;
  compratio_ = 0;
  serialnum_ = 0;
  command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packagetype_ = 0;
    iszip_ = 0;
    compratio_ = 0;
    serialnum_ = 0;
    command_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 packageType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packagetype_)));
          set_has_packagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iszip;
        break;
      }

      // optional int32 iszip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iszip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iszip_)));
          set_has_iszip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compratio;
        break;
      }

      // optional int32 compratio = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compratio_)));
          set_has_compratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serialnum;
        break;
      }

      // required int32 serialnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serialnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialnum_)));
          set_has_serialnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_command;
        break;
      }

      // required int32 command = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_command:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 packageType = 1;
  if (has_packagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packagetype(), output);
  }

  // optional int32 iszip = 2;
  if (has_iszip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iszip(), output);
  }

  // optional int32 compratio = 3;
  if (has_compratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compratio(), output);
  }

  // required int32 serialnum = 4;
  if (has_serialnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serialnum(), output);
  }

  // required int32 command = 5;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 packageType = 1;
  if (has_packagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packagetype(), target);
  }

  // optional int32 iszip = 2;
  if (has_iszip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iszip(), target);
  }

  // optional int32 compratio = 3;
  if (has_compratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compratio(), target);
  }

  // required int32 serialnum = 4;
  if (has_serialnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serialnum(), target);
  }

  // required int32 command = 5;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 packageType = 1;
    if (has_packagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packagetype());
    }

    // optional int32 iszip = 2;
    if (has_iszip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iszip());
    }

    // optional int32 compratio = 3;
    if (has_compratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compratio());
    }

    // required int32 serialnum = 4;
    if (has_serialnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serialnum());
    }

    // required int32 command = 5;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packagetype()) {
      set_packagetype(from.packagetype());
    }
    if (from.has_iszip()) {
      set_iszip(from.iszip());
    }
    if (from.has_compratio()) {
      set_compratio(from.compratio());
    }
    if (from.has_serialnum()) {
      set_serialnum(from.serialnum());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(packagetype_, other->packagetype_);
    std::swap(iszip_, other->iszip_);
    std::swap(compratio_, other->compratio_);
    std::swap(serialnum_, other->serialnum_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pack::kHeaderFieldNumber;
const int Pack::kBodyFieldNumber;
#endif  // !_MSC_VER

Pack::Pack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pack::InitAsDefaultInstance() {
  header_ = const_cast< ::MsgExpress::Header*>(&::MsgExpress::Header::default_instance());
}

Pack::Pack(const Pack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pack::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pack::~Pack() {
  SharedDtor();
}

void Pack::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void Pack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pack_descriptor_;
}

const Pack& Pack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgexpress_2eproto();
  return *default_instance_;
}

Pack* Pack::default_instance_ = NULL;

Pack* Pack::New() const {
  return new Pack;
}

void Pack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::MsgExpress::Header::Clear();
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgExpress.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required bytes body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MsgExpress.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required bytes body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgExpress.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required bytes body = 2;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgExpress.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required bytes body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pack::MergeFrom(const Pack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::MsgExpress::Header::MergeFrom(from.header());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pack::CopyFrom(const Pack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void Pack::Swap(Pack* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pack_descriptor_;
  metadata.reflection = Pack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgExpress

// @@protoc_insertion_point(global_scope)

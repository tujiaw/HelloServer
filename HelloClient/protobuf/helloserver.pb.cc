// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloserver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "helloserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HelloServer {

namespace {

const ::google::protobuf::Descriptor* HelloReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloSub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloSub_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_helloserver_2eproto() {
  protobuf_AddDesc_helloserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "helloserver.proto");
  GOOGLE_CHECK(file != NULL);
  HelloReq_descriptor_ = file->message_type(0);
  static const int HelloReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReq, str_),
  };
  HelloReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloReq_descriptor_,
      HelloReq::default_instance_,
      HelloReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloReq));
  HelloRsp_descriptor_ = file->message_type(1);
  static const int HelloRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloRsp, str_),
  };
  HelloRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloRsp_descriptor_,
      HelloRsp::default_instance_,
      HelloRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloRsp));
  HelloSub_descriptor_ = file->message_type(2);
  static const int HelloSub_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloSub, str1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloSub, str2_),
  };
  HelloSub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloSub_descriptor_,
      HelloSub::default_instance_,
      HelloSub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloSub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloSub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloSub));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_helloserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloReq_descriptor_, &HelloReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloRsp_descriptor_, &HelloRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloSub_descriptor_, &HelloSub::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_helloserver_2eproto() {
  delete HelloReq::default_instance_;
  delete HelloReq_reflection_;
  delete HelloRsp::default_instance_;
  delete HelloRsp_reflection_;
  delete HelloSub::default_instance_;
  delete HelloSub_reflection_;
}

void protobuf_AddDesc_helloserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021helloserver.proto\022\013HelloServer\"\027\n\010Hell"
    "oReq\022\013\n\003str\030\001 \001(\t\"\027\n\010HelloRsp\022\013\n\003str\030\001 \001"
    "(\t\"&\n\010HelloSub\022\014\n\004str1\030\001 \001(\t\022\014\n\004str2\030\002 \001"
    "(\tB\033\n\014com.sumscopeB\013HelloServer", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "helloserver.proto", &protobuf_RegisterTypes);
  HelloReq::default_instance_ = new HelloReq();
  HelloRsp::default_instance_ = new HelloRsp();
  HelloSub::default_instance_ = new HelloSub();
  HelloReq::default_instance_->InitAsDefaultInstance();
  HelloRsp::default_instance_->InitAsDefaultInstance();
  HelloSub::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_helloserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_helloserver_2eproto {
  StaticDescriptorInitializer_helloserver_2eproto() {
    protobuf_AddDesc_helloserver_2eproto();
  }
} static_descriptor_initializer_helloserver_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HelloReq::kStrFieldNumber;
#endif  // !_MSC_VER

HelloReq::HelloReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelloReq::InitAsDefaultInstance() {
}

HelloReq::HelloReq(const HelloReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelloReq::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloReq::~HelloReq() {
  SharedDtor();
}

void HelloReq::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void HelloReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloReq_descriptor_;
}

const HelloReq& HelloReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_helloserver_2eproto();
  return *default_instance_;
}

HelloReq* HelloReq::default_instance_ = NULL;

HelloReq* HelloReq::New() const {
  return new HelloReq;
}

void HelloReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelloReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelloReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloReq::MergeFrom(const HelloReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloReq::CopyFrom(const HelloReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReq::IsInitialized() const {

  return true;
}

void HelloReq::Swap(HelloReq* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloReq_descriptor_;
  metadata.reflection = HelloReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelloRsp::kStrFieldNumber;
#endif  // !_MSC_VER

HelloRsp::HelloRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelloRsp::InitAsDefaultInstance() {
}

HelloRsp::HelloRsp(const HelloRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelloRsp::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloRsp::~HelloRsp() {
  SharedDtor();
}

void HelloRsp::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void HelloRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloRsp_descriptor_;
}

const HelloRsp& HelloRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_helloserver_2eproto();
  return *default_instance_;
}

HelloRsp* HelloRsp::default_instance_ = NULL;

HelloRsp* HelloRsp::New() const {
  return new HelloRsp;
}

void HelloRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelloRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelloRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloRsp::MergeFrom(const HelloRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloRsp::CopyFrom(const HelloRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRsp::IsInitialized() const {

  return true;
}

void HelloRsp::Swap(HelloRsp* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloRsp_descriptor_;
  metadata.reflection = HelloRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelloSub::kStr1FieldNumber;
const int HelloSub::kStr2FieldNumber;
#endif  // !_MSC_VER

HelloSub::HelloSub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelloSub::InitAsDefaultInstance() {
}

HelloSub::HelloSub(const HelloSub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelloSub::SharedCtor() {
  _cached_size_ = 0;
  str1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloSub::~HelloSub() {
  SharedDtor();
}

void HelloSub::SharedDtor() {
  if (str1_ != &::google::protobuf::internal::kEmptyString) {
    delete str1_;
  }
  if (str2_ != &::google::protobuf::internal::kEmptyString) {
    delete str2_;
  }
  if (this != default_instance_) {
  }
}

void HelloSub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloSub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloSub_descriptor_;
}

const HelloSub& HelloSub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_helloserver_2eproto();
  return *default_instance_;
}

HelloSub* HelloSub::default_instance_ = NULL;

HelloSub* HelloSub::New() const {
  return new HelloSub;
}

void HelloSub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str1()) {
      if (str1_ != &::google::protobuf::internal::kEmptyString) {
        str1_->clear();
      }
    }
    if (has_str2()) {
      if (str2_ != &::google::protobuf::internal::kEmptyString) {
        str2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str1().data(), this->str1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str2;
        break;
      }

      // optional string str2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str2().data(), this->str2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str1 = 1;
  if (has_str1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str1(), output);
  }

  // optional string str2 = 2;
  if (has_str2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str2().data(), this->str2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelloSub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str1 = 1;
  if (has_str1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str1(), target);
  }

  // optional string str2 = 2;
  if (has_str2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str2().data(), this->str2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelloSub::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str1 = 1;
    if (has_str1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str1());
    }

    // optional string str2 = 2;
    if (has_str2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloSub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloSub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloSub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloSub::MergeFrom(const HelloSub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str1()) {
      set_str1(from.str1());
    }
    if (from.has_str2()) {
      set_str2(from.str2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloSub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloSub::CopyFrom(const HelloSub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloSub::IsInitialized() const {

  return true;
}

void HelloSub::Swap(HelloSub* other) {
  if (other != this) {
    std::swap(str1_, other->str1_);
    std::swap(str2_, other->str2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloSub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloSub_descriptor_;
  metadata.reflection = HelloSub_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloServer

// @@protoc_insertion_point(global_scope)

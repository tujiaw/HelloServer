// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloserver.proto

#ifndef PROTOBUF_helloserver_2eproto__INCLUDED
#define PROTOBUF_helloserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace HelloServer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_helloserver_2eproto();
void protobuf_AssignDesc_helloserver_2eproto();
void protobuf_ShutdownFile_helloserver_2eproto();

class HelloReq;
class HelloRsp;
class HelloSub;

// ===================================================================

class HelloReq : public ::google::protobuf::Message {
 public:
  HelloReq();
  virtual ~HelloReq();

  HelloReq(const HelloReq& from);

  inline HelloReq& operator=(const HelloReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloReq& default_instance();

  void Swap(HelloReq* other);

  // implements Message ----------------------------------------------

  HelloReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloReq& from);
  void MergeFrom(const HelloReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:HelloServer.HelloReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_helloserver_2eproto();
  friend void protobuf_AssignDesc_helloserver_2eproto();
  friend void protobuf_ShutdownFile_helloserver_2eproto();

  void InitAsDefaultInstance();
  static HelloReq* default_instance_;
};
// -------------------------------------------------------------------

class HelloRsp : public ::google::protobuf::Message {
 public:
  HelloRsp();
  virtual ~HelloRsp();

  HelloRsp(const HelloRsp& from);

  inline HelloRsp& operator=(const HelloRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRsp& default_instance();

  void Swap(HelloRsp* other);

  // implements Message ----------------------------------------------

  HelloRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloRsp& from);
  void MergeFrom(const HelloRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:HelloServer.HelloRsp)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_helloserver_2eproto();
  friend void protobuf_AssignDesc_helloserver_2eproto();
  friend void protobuf_ShutdownFile_helloserver_2eproto();

  void InitAsDefaultInstance();
  static HelloRsp* default_instance_;
};
// -------------------------------------------------------------------

class HelloSub : public ::google::protobuf::Message {
 public:
  HelloSub();
  virtual ~HelloSub();

  HelloSub(const HelloSub& from);

  inline HelloSub& operator=(const HelloSub& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloSub& default_instance();

  void Swap(HelloSub* other);

  // implements Message ----------------------------------------------

  HelloSub* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloSub& from);
  void MergeFrom(const HelloSub& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string str1 = 1;
  inline bool has_str1() const;
  inline void clear_str1();
  static const int kStr1FieldNumber = 1;
  inline const ::std::string& str1() const;
  inline void set_str1(const ::std::string& value);
  inline void set_str1(const char* value);
  inline void set_str1(const char* value, size_t size);
  inline ::std::string* mutable_str1();
  inline ::std::string* release_str1();
  inline void set_allocated_str1(::std::string* str1);

  // optional string str2 = 2;
  inline bool has_str2() const;
  inline void clear_str2();
  static const int kStr2FieldNumber = 2;
  inline const ::std::string& str2() const;
  inline void set_str2(const ::std::string& value);
  inline void set_str2(const char* value);
  inline void set_str2(const char* value, size_t size);
  inline ::std::string* mutable_str2();
  inline ::std::string* release_str2();
  inline void set_allocated_str2(::std::string* str2);

  // @@protoc_insertion_point(class_scope:HelloServer.HelloSub)
 private:
  inline void set_has_str1();
  inline void clear_has_str1();
  inline void set_has_str2();
  inline void clear_has_str2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* str1_;
  ::std::string* str2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_helloserver_2eproto();
  friend void protobuf_AssignDesc_helloserver_2eproto();
  friend void protobuf_ShutdownFile_helloserver_2eproto();

  void InitAsDefaultInstance();
  static HelloSub* default_instance_;
};
// ===================================================================


// ===================================================================

// HelloReq

// optional string name = 1;
inline bool HelloReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HelloReq::name() const {
  return *name_;
}
inline void HelloReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HelloReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HelloReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* HelloReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HelloReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HelloRsp

// optional int32 code = 1;
inline bool HelloRsp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloRsp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloRsp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloRsp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 HelloRsp::code() const {
  return code_;
}
inline void HelloRsp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional string content = 2;
inline bool HelloRsp::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelloRsp::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelloRsp::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelloRsp::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& HelloRsp::content() const {
  return *content_;
}
inline void HelloRsp::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void HelloRsp::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void HelloRsp::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloRsp::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* HelloRsp::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HelloRsp::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HelloSub

// optional string str1 = 1;
inline bool HelloSub::has_str1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloSub::set_has_str1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloSub::clear_has_str1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloSub::clear_str1() {
  if (str1_ != &::google::protobuf::internal::kEmptyString) {
    str1_->clear();
  }
  clear_has_str1();
}
inline const ::std::string& HelloSub::str1() const {
  return *str1_;
}
inline void HelloSub::set_str1(const ::std::string& value) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(value);
}
inline void HelloSub::set_str1(const char* value) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(value);
}
inline void HelloSub::set_str1(const char* value, size_t size) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloSub::mutable_str1() {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  return str1_;
}
inline ::std::string* HelloSub::release_str1() {
  clear_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str1_;
    str1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HelloSub::set_allocated_str1(::std::string* str1) {
  if (str1_ != &::google::protobuf::internal::kEmptyString) {
    delete str1_;
  }
  if (str1) {
    set_has_str1();
    str1_ = str1;
  } else {
    clear_has_str1();
    str1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string str2 = 2;
inline bool HelloSub::has_str2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelloSub::set_has_str2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelloSub::clear_has_str2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelloSub::clear_str2() {
  if (str2_ != &::google::protobuf::internal::kEmptyString) {
    str2_->clear();
  }
  clear_has_str2();
}
inline const ::std::string& HelloSub::str2() const {
  return *str2_;
}
inline void HelloSub::set_str2(const ::std::string& value) {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  str2_->assign(value);
}
inline void HelloSub::set_str2(const char* value) {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  str2_->assign(value);
}
inline void HelloSub::set_str2(const char* value, size_t size) {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  str2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloSub::mutable_str2() {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  return str2_;
}
inline ::std::string* HelloSub::release_str2() {
  clear_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str2_;
    str2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HelloSub::set_allocated_str2(::std::string* str2) {
  if (str2_ != &::google::protobuf::internal::kEmptyString) {
    delete str2_;
  }
  if (str2) {
    set_has_str2();
    str2_ = str2;
  } else {
    clear_has_str2();
    str2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloServer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_helloserver_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgexpress.proto

#ifndef PROTOBUF_msgexpress_2eproto__INCLUDED
#define PROTOBUF_msgexpress_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MsgExpress {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msgexpress_2eproto();
void protobuf_AssignDesc_msgexpress_2eproto();
void protobuf_ShutdownFile_msgexpress_2eproto();

class ErrMessage;
class StartupApplication;
class StopBroker;
class CommonResponse;
class LoginInfo;
class LoginResponse;
class Logout;
class GetAppList;
class GetAppInfo;
class AppInfo;
class UpdateAppStatus;
class AppList;
class AppServerList;
class KickOffApp;
class RestartApp;
class BrokerInfo;
class HeartBeat;
class HeartBeatResponse;
class Complex;
class DataItem;
class ConditionValue;
class ConditionItem;
class SimpleSubscription;
class SubscribeData;
class UnSubscribeData;
class ComplexSubscribeData;
class PublishData;
class TokenInfo;
class Header;
class Pack;

enum AppStatus {
  None = 0,
  Connected = 1,
  Authing = 2,
  Authed = 3
};
bool AppStatus_IsValid(int value);
const AppStatus AppStatus_MIN = None;
const AppStatus AppStatus_MAX = Authed;
const int AppStatus_ARRAYSIZE = AppStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* AppStatus_descriptor();
inline const ::std::string& AppStatus_Name(AppStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    AppStatus_descriptor(), value);
}
inline bool AppStatus_Parse(
    const ::std::string& name, AppStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AppStatus>(
    AppStatus_descriptor(), name, value);
}
enum DataType {
  STRING = 1,
  INT32 = 2,
  UINT32 = 3,
  INT64 = 4,
  UINT64 = 5,
  FLOAT = 6,
  DOUBLE = 7,
  DATETIME = 8,
  BINARY = 9,
  BOOL = 10,
  COMPLEX = 11
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = STRING;
const DataType DataType_MAX = COMPLEX;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum Operator {
  Equal = 1,
  NotEqual = 2,
  Less = 3,
  LessOrEqual = 4,
  Bigger = 5,
  BiggerOrEqual = 6
};
bool Operator_IsValid(int value);
const Operator Operator_MIN = Equal;
const Operator Operator_MAX = BiggerOrEqual;
const int Operator_ARRAYSIZE = Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operator_descriptor();
inline const ::std::string& Operator_Name(Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operator_descriptor(), value);
}
inline bool Operator_Parse(
    const ::std::string& name, Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operator>(
    Operator_descriptor(), name, value);
}
// ===================================================================

class ErrMessage : public ::google::protobuf::Message {
 public:
  ErrMessage();
  virtual ~ErrMessage();

  ErrMessage(const ErrMessage& from);

  inline ErrMessage& operator=(const ErrMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrMessage& default_instance();

  void Swap(ErrMessage* other);

  // implements Message ----------------------------------------------

  ErrMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrMessage& from);
  void MergeFrom(const ErrMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // required string errmsg = 2;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:MsgExpress.ErrMessage)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* errmsg_;
  ::google::protobuf::int32 errcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static ErrMessage* default_instance_;
};
// -------------------------------------------------------------------

class StartupApplication : public ::google::protobuf::Message {
 public:
  StartupApplication();
  virtual ~StartupApplication();

  StartupApplication(const StartupApplication& from);

  inline StartupApplication& operator=(const StartupApplication& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartupApplication& default_instance();

  void Swap(StartupApplication* other);

  // implements Message ----------------------------------------------

  StartupApplication* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartupApplication& from);
  void MergeFrom(const StartupApplication& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string exefullname = 1;
  inline bool has_exefullname() const;
  inline void clear_exefullname();
  static const int kExefullnameFieldNumber = 1;
  inline const ::std::string& exefullname() const;
  inline void set_exefullname(const ::std::string& value);
  inline void set_exefullname(const char* value);
  inline void set_exefullname(const char* value, size_t size);
  inline ::std::string* mutable_exefullname();
  inline ::std::string* release_exefullname();
  inline void set_allocated_exefullname(::std::string* exefullname);

  // repeated string args = 2;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 2;
  inline const ::std::string& args(int index) const;
  inline ::std::string* mutable_args(int index);
  inline void set_args(int index, const ::std::string& value);
  inline void set_args(int index, const char* value);
  inline void set_args(int index, const char* value, size_t size);
  inline ::std::string* add_args();
  inline void add_args(const ::std::string& value);
  inline void add_args(const char* value);
  inline void add_args(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // @@protoc_insertion_point(class_scope:MsgExpress.StartupApplication)
 private:
  inline void set_has_exefullname();
  inline void clear_has_exefullname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* exefullname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static StartupApplication* default_instance_;
};
// -------------------------------------------------------------------

class StopBroker : public ::google::protobuf::Message {
 public:
  StopBroker();
  virtual ~StopBroker();

  StopBroker(const StopBroker& from);

  inline StopBroker& operator=(const StopBroker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopBroker& default_instance();

  void Swap(StopBroker* other);

  // implements Message ----------------------------------------------

  StopBroker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopBroker& from);
  void MergeFrom(const StopBroker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline const ::std::string& dummy() const;
  inline void set_dummy(const ::std::string& value);
  inline void set_dummy(const char* value);
  inline void set_dummy(const char* value, size_t size);
  inline ::std::string* mutable_dummy();
  inline ::std::string* release_dummy();
  inline void set_allocated_dummy(::std::string* dummy);

  // @@protoc_insertion_point(class_scope:MsgExpress.StopBroker)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dummy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static StopBroker* default_instance_;
};
// -------------------------------------------------------------------

class CommonResponse : public ::google::protobuf::Message {
 public:
  CommonResponse();
  virtual ~CommonResponse();

  CommonResponse(const CommonResponse& from);

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonResponse& default_instance();

  void Swap(CommonResponse* other);

  // implements Message ----------------------------------------------

  CommonResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:MsgExpress.CommonResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static CommonResponse* default_instance_;
};
// -------------------------------------------------------------------

class LoginInfo : public ::google::protobuf::Message {
 public:
  LoginInfo();
  virtual ~LoginInfo();

  LoginInfo(const LoginInfo& from);

  inline LoginInfo& operator=(const LoginInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginInfo& default_instance();

  void Swap(LoginInfo* other);

  // implements Message ----------------------------------------------

  LoginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginInfo& from);
  void MergeFrom(const LoginInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 group = 3;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 3;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional string uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional string auth = 5;
  inline bool has_auth() const;
  inline void clear_auth();
  static const int kAuthFieldNumber = 5;
  inline const ::std::string& auth() const;
  inline void set_auth(const ::std::string& value);
  inline void set_auth(const char* value);
  inline void set_auth(const char* value, size_t size);
  inline ::std::string* mutable_auth();
  inline ::std::string* release_auth();
  inline void set_allocated_auth(::std::string* auth);

  // optional int64 starttime = 6;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 6;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // repeated int32 serviceid = 7;
  inline int serviceid_size() const;
  inline void clear_serviceid();
  static const int kServiceidFieldNumber = 7;
  inline ::google::protobuf::int32 serviceid(int index) const;
  inline void set_serviceid(int index, ::google::protobuf::int32 value);
  inline void add_serviceid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      serviceid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_serviceid();

  // optional string ip = 8;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 8;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:MsgExpress.LoginInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_auth();
  inline void clear_has_auth();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 group_;
  ::std::string* uuid_;
  ::std::string* auth_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > serviceid_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static LoginInfo* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::int32 addr() const;
  inline void set_addr(::google::protobuf::int32 value);

  // optional int64 brokertime = 2;
  inline bool has_brokertime() const;
  inline void clear_brokertime();
  static const int kBrokertimeFieldNumber = 2;
  inline ::google::protobuf::int64 brokertime() const;
  inline void set_brokertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.LoginResponse)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_brokertime();
  inline void clear_has_brokertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 brokertime_;
  ::google::protobuf::int32 addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class Logout : public ::google::protobuf::Message {
 public:
  Logout();
  virtual ~Logout();

  Logout(const Logout& from);

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Logout& default_instance();

  void Swap(Logout* other);

  // implements Message ----------------------------------------------

  Logout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reserve = 1;
  inline bool has_reserve() const;
  inline void clear_reserve();
  static const int kReserveFieldNumber = 1;
  inline ::google::protobuf::int32 reserve() const;
  inline void set_reserve(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.Logout)
 private:
  inline void set_has_reserve();
  inline void clear_has_reserve();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reserve_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static Logout* default_instance_;
};
// -------------------------------------------------------------------

class GetAppList : public ::google::protobuf::Message {
 public:
  GetAppList();
  virtual ~GetAppList();

  GetAppList(const GetAppList& from);

  inline GetAppList& operator=(const GetAppList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAppList& default_instance();

  void Swap(GetAppList* other);

  // implements Message ----------------------------------------------

  GetAppList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAppList& from);
  void MergeFrom(const GetAppList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 serviceid = 1;
  inline int serviceid_size() const;
  inline void clear_serviceid();
  static const int kServiceidFieldNumber = 1;
  inline ::google::protobuf::int32 serviceid(int index) const;
  inline void set_serviceid(int index, ::google::protobuf::int32 value);
  inline void add_serviceid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      serviceid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_serviceid();

  // @@protoc_insertion_point(class_scope:MsgExpress.GetAppList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > serviceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static GetAppList* default_instance_;
};
// -------------------------------------------------------------------

class GetAppInfo : public ::google::protobuf::Message {
 public:
  GetAppInfo();
  virtual ~GetAppInfo();

  GetAppInfo(const GetAppInfo& from);

  inline GetAppInfo& operator=(const GetAppInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAppInfo& default_instance();

  void Swap(GetAppInfo* other);

  // implements Message ----------------------------------------------

  GetAppInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAppInfo& from);
  void MergeFrom(const GetAppInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::int32 addr() const;
  inline void set_addr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.GetAppInfo)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static GetAppInfo* default_instance_;
};
// -------------------------------------------------------------------

class AppInfo : public ::google::protobuf::Message {
 public:
  AppInfo();
  virtual ~AppInfo();

  AppInfo(const AppInfo& from);

  inline AppInfo& operator=(const AppInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppInfo& default_instance();

  void Swap(AppInfo* other);

  // implements Message ----------------------------------------------

  AppInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppInfo& from);
  void MergeFrom(const AppInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MsgExpress.LoginInfo loginInfo = 1;
  inline bool has_logininfo() const;
  inline void clear_logininfo();
  static const int kLoginInfoFieldNumber = 1;
  inline const ::MsgExpress::LoginInfo& logininfo() const;
  inline ::MsgExpress::LoginInfo* mutable_logininfo();
  inline ::MsgExpress::LoginInfo* release_logininfo();
  inline void set_allocated_logininfo(::MsgExpress::LoginInfo* logininfo);

  // required int32 addr = 2;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 2;
  inline ::google::protobuf::int32 addr() const;
  inline void set_addr(::google::protobuf::int32 value);

  // optional int64 logintime = 3;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLogintimeFieldNumber = 3;
  inline ::google::protobuf::int64 logintime() const;
  inline void set_logintime(::google::protobuf::int64 value);

  // optional .MsgExpress.AppStatus status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::MsgExpress::AppStatus status() const;
  inline void set_status(::MsgExpress::AppStatus value);

  // optional string token = 5;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 5;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:MsgExpress.AppInfo)
 private:
  inline void set_has_logininfo();
  inline void clear_has_logininfo();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MsgExpress::LoginInfo* logininfo_;
  ::google::protobuf::int64 logintime_;
  ::google::protobuf::int32 addr_;
  int status_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static AppInfo* default_instance_;
};
// -------------------------------------------------------------------

class UpdateAppStatus : public ::google::protobuf::Message {
 public:
  UpdateAppStatus();
  virtual ~UpdateAppStatus();

  UpdateAppStatus(const UpdateAppStatus& from);

  inline UpdateAppStatus& operator=(const UpdateAppStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAppStatus& default_instance();

  void Swap(UpdateAppStatus* other);

  // implements Message ----------------------------------------------

  UpdateAppStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateAppStatus& from);
  void MergeFrom(const UpdateAppStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::int32 addr() const;
  inline void set_addr(::google::protobuf::int32 value);

  // required .MsgExpress.AppStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::MsgExpress::AppStatus status() const;
  inline void set_status(::MsgExpress::AppStatus value);

  // required string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:MsgExpress.UpdateAppStatus)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 addr_;
  int status_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static UpdateAppStatus* default_instance_;
};
// -------------------------------------------------------------------

class AppList : public ::google::protobuf::Message {
 public:
  AppList();
  virtual ~AppList();

  AppList(const AppList& from);

  inline AppList& operator=(const AppList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppList& default_instance();

  void Swap(AppList* other);

  // implements Message ----------------------------------------------

  AppList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppList& from);
  void MergeFrom(const AppList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MsgExpress.AppInfo appinfo = 1;
  inline int appinfo_size() const;
  inline void clear_appinfo();
  static const int kAppinfoFieldNumber = 1;
  inline const ::MsgExpress::AppInfo& appinfo(int index) const;
  inline ::MsgExpress::AppInfo* mutable_appinfo(int index);
  inline ::MsgExpress::AppInfo* add_appinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::AppInfo >&
      appinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::AppInfo >*
      mutable_appinfo();

  // @@protoc_insertion_point(class_scope:MsgExpress.AppList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MsgExpress::AppInfo > appinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static AppList* default_instance_;
};
// -------------------------------------------------------------------

class AppServerList : public ::google::protobuf::Message {
 public:
  AppServerList();
  virtual ~AppServerList();

  AppServerList(const AppServerList& from);

  inline AppServerList& operator=(const AppServerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppServerList& default_instance();

  void Swap(AppServerList* other);

  // implements Message ----------------------------------------------

  AppServerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppServerList& from);
  void MergeFrom(const AppServerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 serviceid = 1;
  inline bool has_serviceid() const;
  inline void clear_serviceid();
  static const int kServiceidFieldNumber = 1;
  inline ::google::protobuf::int32 serviceid() const;
  inline void set_serviceid(::google::protobuf::int32 value);

  // repeated int32 addrs = 2;
  inline int addrs_size() const;
  inline void clear_addrs();
  static const int kAddrsFieldNumber = 2;
  inline ::google::protobuf::int32 addrs(int index) const;
  inline void set_addrs(int index, ::google::protobuf::int32 value);
  inline void add_addrs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      addrs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_addrs();

  // required bool isMasterSlaveMode = 3;
  inline bool has_ismasterslavemode() const;
  inline void clear_ismasterslavemode();
  static const int kIsMasterSlaveModeFieldNumber = 3;
  inline bool ismasterslavemode() const;
  inline void set_ismasterslavemode(bool value);

  // required bool brokerIsMaster = 4;
  inline bool has_brokerismaster() const;
  inline void clear_brokerismaster();
  static const int kBrokerIsMasterFieldNumber = 4;
  inline bool brokerismaster() const;
  inline void set_brokerismaster(bool value);

  // @@protoc_insertion_point(class_scope:MsgExpress.AppServerList)
 private:
  inline void set_has_serviceid();
  inline void clear_has_serviceid();
  inline void set_has_ismasterslavemode();
  inline void clear_has_ismasterslavemode();
  inline void set_has_brokerismaster();
  inline void clear_has_brokerismaster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > addrs_;
  ::google::protobuf::int32 serviceid_;
  bool ismasterslavemode_;
  bool brokerismaster_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static AppServerList* default_instance_;
};
// -------------------------------------------------------------------

class KickOffApp : public ::google::protobuf::Message {
 public:
  KickOffApp();
  virtual ~KickOffApp();

  KickOffApp(const KickOffApp& from);

  inline KickOffApp& operator=(const KickOffApp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickOffApp& default_instance();

  void Swap(KickOffApp* other);

  // implements Message ----------------------------------------------

  KickOffApp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickOffApp& from);
  void MergeFrom(const KickOffApp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline ::google::protobuf::int32 addr() const;
  inline void set_addr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.KickOffApp)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static KickOffApp* default_instance_;
};
// -------------------------------------------------------------------

class RestartApp : public ::google::protobuf::Message {
 public:
  RestartApp();
  virtual ~RestartApp();

  RestartApp(const RestartApp& from);

  inline RestartApp& operator=(const RestartApp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestartApp& default_instance();

  void Swap(RestartApp* other);

  // implements Message ----------------------------------------------

  RestartApp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RestartApp& from);
  void MergeFrom(const RestartApp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:MsgExpress.RestartApp)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static RestartApp* default_instance_;
};
// -------------------------------------------------------------------

class BrokerInfo : public ::google::protobuf::Message {
 public:
  BrokerInfo();
  virtual ~BrokerInfo();

  BrokerInfo(const BrokerInfo& from);

  inline BrokerInfo& operator=(const BrokerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerInfo& default_instance();

  void Swap(BrokerInfo* other);

  // implements Message ----------------------------------------------

  BrokerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrokerInfo& from);
  void MergeFrom(const BrokerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 starttime = 1;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 1;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional int32 brokerid = 2;
  inline bool has_brokerid() const;
  inline void clear_brokerid();
  static const int kBrokeridFieldNumber = 2;
  inline ::google::protobuf::int32 brokerid() const;
  inline void set_brokerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.BrokerInfo)
 private:
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_brokerid();
  inline void clear_has_brokerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int32 brokerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static BrokerInfo* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeat : public ::google::protobuf::Message {
 public:
  HeartBeat();
  virtual ~HeartBeat();

  HeartBeat(const HeartBeat& from);

  inline HeartBeat& operator=(const HeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeat& default_instance();

  void Swap(HeartBeat* other);

  // implements Message ----------------------------------------------

  HeartBeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeat& from);
  void MergeFrom(const HeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cpu = 1;
  inline bool has_cpu() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 1;
  inline ::google::protobuf::int32 cpu() const;
  inline void set_cpu(::google::protobuf::int32 value);

  // optional int32 topmemory = 2;
  inline bool has_topmemory() const;
  inline void clear_topmemory();
  static const int kTopmemoryFieldNumber = 2;
  inline ::google::protobuf::int32 topmemory() const;
  inline void set_topmemory(::google::protobuf::int32 value);

  // optional int32 memory = 3;
  inline bool has_memory() const;
  inline void clear_memory();
  static const int kMemoryFieldNumber = 3;
  inline ::google::protobuf::int32 memory() const;
  inline void set_memory(::google::protobuf::int32 value);

  // optional int32 sendqueue = 4;
  inline bool has_sendqueue() const;
  inline void clear_sendqueue();
  static const int kSendqueueFieldNumber = 4;
  inline ::google::protobuf::int32 sendqueue() const;
  inline void set_sendqueue(::google::protobuf::int32 value);

  // optional int32 receivequeue = 5;
  inline bool has_receivequeue() const;
  inline void clear_receivequeue();
  static const int kReceivequeueFieldNumber = 5;
  inline ::google::protobuf::int32 receivequeue() const;
  inline void set_receivequeue(::google::protobuf::int32 value);

  // optional int32 sendrequest = 6;
  inline bool has_sendrequest() const;
  inline void clear_sendrequest();
  static const int kSendrequestFieldNumber = 6;
  inline ::google::protobuf::int32 sendrequest() const;
  inline void set_sendrequest(::google::protobuf::int32 value);

  // optional int32 recvrequest = 7;
  inline bool has_recvrequest() const;
  inline void clear_recvrequest();
  static const int kRecvrequestFieldNumber = 7;
  inline ::google::protobuf::int32 recvrequest() const;
  inline void set_recvrequest(::google::protobuf::int32 value);

  // optional int32 sendresponse = 8;
  inline bool has_sendresponse() const;
  inline void clear_sendresponse();
  static const int kSendresponseFieldNumber = 8;
  inline ::google::protobuf::int32 sendresponse() const;
  inline void set_sendresponse(::google::protobuf::int32 value);

  // optional int32 recvresponse = 9;
  inline bool has_recvresponse() const;
  inline void clear_recvresponse();
  static const int kRecvresponseFieldNumber = 9;
  inline ::google::protobuf::int32 recvresponse() const;
  inline void set_recvresponse(::google::protobuf::int32 value);

  // optional int32 sendpub = 10;
  inline bool has_sendpub() const;
  inline void clear_sendpub();
  static const int kSendpubFieldNumber = 10;
  inline ::google::protobuf::int32 sendpub() const;
  inline void set_sendpub(::google::protobuf::int32 value);

  // optional int32 recvpub = 11;
  inline bool has_recvpub() const;
  inline void clear_recvpub();
  static const int kRecvpubFieldNumber = 11;
  inline ::google::protobuf::int32 recvpub() const;
  inline void set_recvpub(::google::protobuf::int32 value);

  // optional int64 servertime = 12;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 12;
  inline ::google::protobuf::int64 servertime() const;
  inline void set_servertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.HeartBeat)
 private:
  inline void set_has_cpu();
  inline void clear_has_cpu();
  inline void set_has_topmemory();
  inline void clear_has_topmemory();
  inline void set_has_memory();
  inline void clear_has_memory();
  inline void set_has_sendqueue();
  inline void clear_has_sendqueue();
  inline void set_has_receivequeue();
  inline void clear_has_receivequeue();
  inline void set_has_sendrequest();
  inline void clear_has_sendrequest();
  inline void set_has_recvrequest();
  inline void clear_has_recvrequest();
  inline void set_has_sendresponse();
  inline void clear_has_sendresponse();
  inline void set_has_recvresponse();
  inline void clear_has_recvresponse();
  inline void set_has_sendpub();
  inline void clear_has_sendpub();
  inline void set_has_recvpub();
  inline void clear_has_recvpub();
  inline void set_has_servertime();
  inline void clear_has_servertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cpu_;
  ::google::protobuf::int32 topmemory_;
  ::google::protobuf::int32 memory_;
  ::google::protobuf::int32 sendqueue_;
  ::google::protobuf::int32 receivequeue_;
  ::google::protobuf::int32 sendrequest_;
  ::google::protobuf::int32 recvrequest_;
  ::google::protobuf::int32 sendresponse_;
  ::google::protobuf::int32 recvresponse_;
  ::google::protobuf::int32 sendpub_;
  ::google::protobuf::int64 servertime_;
  ::google::protobuf::int32 recvpub_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static HeartBeat* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatResponse : public ::google::protobuf::Message {
 public:
  HeartBeatResponse();
  virtual ~HeartBeatResponse();

  HeartBeatResponse(const HeartBeatResponse& from);

  inline HeartBeatResponse& operator=(const HeartBeatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatResponse& default_instance();

  void Swap(HeartBeatResponse* other);

  // implements Message ----------------------------------------------

  HeartBeatResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatResponse& from);
  void MergeFrom(const HeartBeatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional int64 servertime = 2;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 2;
  inline ::google::protobuf::int64 servertime() const;
  inline void set_servertime(::google::protobuf::int64 value);

  // optional int64 brokertime = 3;
  inline bool has_brokertime() const;
  inline void clear_brokertime();
  static const int kBrokertimeFieldNumber = 3;
  inline ::google::protobuf::int64 brokertime() const;
  inline void set_brokertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.HeartBeatResponse)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_brokertime();
  inline void clear_has_brokertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 servertime_;
  ::google::protobuf::int64 brokertime_;
  ::google::protobuf::int32 retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatResponse* default_instance_;
};
// -------------------------------------------------------------------

class Complex : public ::google::protobuf::Message {
 public:
  Complex();
  virtual ~Complex();

  Complex(const Complex& from);

  inline Complex& operator=(const Complex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Complex& default_instance();

  void Swap(Complex* other);

  // implements Message ----------------------------------------------

  Complex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Complex& from);
  void MergeFrom(const Complex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline ::google::protobuf::int64 a() const;
  inline void set_a(::google::protobuf::int64 value);

  // required bytes b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::std::string& b() const;
  inline void set_b(const ::std::string& value);
  inline void set_b(const char* value);
  inline void set_b(const void* value, size_t size);
  inline ::std::string* mutable_b();
  inline ::std::string* release_b();
  inline void set_allocated_b(::std::string* b);

  // @@protoc_insertion_point(class_scope:MsgExpress.Complex)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 a_;
  ::std::string* b_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static Complex* default_instance_;
};
// -------------------------------------------------------------------

class DataItem : public ::google::protobuf::Message {
 public:
  DataItem();
  virtual ~DataItem();

  DataItem(const DataItem& from);

  inline DataItem& operator=(const DataItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataItem& default_instance();

  void Swap(DataItem* other);

  // implements Message ----------------------------------------------

  DataItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataItem& from);
  void MergeFrom(const DataItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required .MsgExpress.DataType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::MsgExpress::DataType type() const;
  inline void set_type(::MsgExpress::DataType value);

  // repeated bytes value = 3;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const void* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // repeated string strVal = 4;
  inline int strval_size() const;
  inline void clear_strval();
  static const int kStrValFieldNumber = 4;
  inline const ::std::string& strval(int index) const;
  inline ::std::string* mutable_strval(int index);
  inline void set_strval(int index, const ::std::string& value);
  inline void set_strval(int index, const char* value);
  inline void set_strval(int index, const char* value, size_t size);
  inline ::std::string* add_strval();
  inline void add_strval(const ::std::string& value);
  inline void add_strval(const char* value);
  inline void add_strval(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strval() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strval();

  // repeated int32 iVal = 5;
  inline int ival_size() const;
  inline void clear_ival();
  static const int kIValFieldNumber = 5;
  inline ::google::protobuf::int32 ival(int index) const;
  inline void set_ival(int index, ::google::protobuf::int32 value);
  inline void add_ival(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ival() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ival();

  // repeated uint32 uiVal = 6;
  inline int uival_size() const;
  inline void clear_uival();
  static const int kUiValFieldNumber = 6;
  inline ::google::protobuf::uint32 uival(int index) const;
  inline void set_uival(int index, ::google::protobuf::uint32 value);
  inline void add_uival(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uival() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uival();

  // repeated int64 lVal = 7;
  inline int lval_size() const;
  inline void clear_lval();
  static const int kLValFieldNumber = 7;
  inline ::google::protobuf::int64 lval(int index) const;
  inline void set_lval(int index, ::google::protobuf::int64 value);
  inline void add_lval(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      lval() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_lval();

  // repeated uint64 ulVal = 8;
  inline int ulval_size() const;
  inline void clear_ulval();
  static const int kUlValFieldNumber = 8;
  inline ::google::protobuf::uint64 ulval(int index) const;
  inline void set_ulval(int index, ::google::protobuf::uint64 value);
  inline void add_ulval(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ulval() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ulval();

  // repeated float fVal = 9;
  inline int fval_size() const;
  inline void clear_fval();
  static const int kFValFieldNumber = 9;
  inline float fval(int index) const;
  inline void set_fval(int index, float value);
  inline void add_fval(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      fval() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_fval();

  // repeated double dVal = 10;
  inline int dval_size() const;
  inline void clear_dval();
  static const int kDValFieldNumber = 10;
  inline double dval(int index) const;
  inline void set_dval(int index, double value);
  inline void add_dval(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      dval() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_dval();

  // repeated bool bVal = 11;
  inline int bval_size() const;
  inline void clear_bval();
  static const int kBValFieldNumber = 11;
  inline bool bval(int index) const;
  inline void set_bval(int index, bool value);
  inline void add_bval(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      bval() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_bval();

  // repeated bytes rawVal = 12;
  inline int rawval_size() const;
  inline void clear_rawval();
  static const int kRawValFieldNumber = 12;
  inline const ::std::string& rawval(int index) const;
  inline ::std::string* mutable_rawval(int index);
  inline void set_rawval(int index, const ::std::string& value);
  inline void set_rawval(int index, const char* value);
  inline void set_rawval(int index, const void* value, size_t size);
  inline ::std::string* add_rawval();
  inline void add_rawval(const ::std::string& value);
  inline void add_rawval(const char* value);
  inline void add_rawval(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& rawval() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rawval();

  // repeated uint64 tVal = 13;
  inline int tval_size() const;
  inline void clear_tval();
  static const int kTValFieldNumber = 13;
  inline ::google::protobuf::uint64 tval(int index) const;
  inline void set_tval(int index, ::google::protobuf::uint64 value);
  inline void add_tval(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tval() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tval();

  // repeated .MsgExpress.Complex compVal = 14;
  inline int compval_size() const;
  inline void clear_compval();
  static const int kCompValFieldNumber = 14;
  inline const ::MsgExpress::Complex& compval(int index) const;
  inline ::MsgExpress::Complex* mutable_compval(int index);
  inline ::MsgExpress::Complex* add_compval();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::Complex >&
      compval() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::Complex >*
      mutable_compval();

  // optional bool isPK = 20;
  inline bool has_ispk() const;
  inline void clear_ispk();
  static const int kIsPKFieldNumber = 20;
  inline bool ispk() const;
  inline void set_ispk(bool value);

  // @@protoc_insertion_point(class_scope:MsgExpress.DataItem)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ispk();
  inline void clear_has_ispk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ival_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uival_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > lval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ulval_;
  ::google::protobuf::RepeatedField< float > fval_;
  ::google::protobuf::RepeatedField< double > dval_;
  ::google::protobuf::RepeatedField< bool > bval_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rawval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tval_;
  ::google::protobuf::RepeatedPtrField< ::MsgExpress::Complex > compval_;
  bool ispk_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static DataItem* default_instance_;
};
// -------------------------------------------------------------------

class ConditionValue : public ::google::protobuf::Message {
 public:
  ConditionValue();
  virtual ~ConditionValue();

  ConditionValue(const ConditionValue& from);

  inline ConditionValue& operator=(const ConditionValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionValue& default_instance();

  void Swap(ConditionValue* other);

  // implements Message ----------------------------------------------

  ConditionValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConditionValue& from);
  void MergeFrom(const ConditionValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MsgExpress.Operator operator = 1;
  inline bool has_operator_() const;
  inline void clear_operator_();
  static const int kOperatorFieldNumber = 1;
  inline ::MsgExpress::Operator operator_() const;
  inline void set_operator_(::MsgExpress::Operator value);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:MsgExpress.ConditionValue)
 private:
  inline void set_has_operator_();
  inline void clear_has_operator_();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  int operator__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static ConditionValue* default_instance_;
};
// -------------------------------------------------------------------

class ConditionItem : public ::google::protobuf::Message {
 public:
  ConditionItem();
  virtual ~ConditionItem();

  ConditionItem(const ConditionItem& from);

  inline ConditionItem& operator=(const ConditionItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionItem& default_instance();

  void Swap(ConditionItem* other);

  // implements Message ----------------------------------------------

  ConditionItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConditionItem& from);
  void MergeFrom(const ConditionItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required .MsgExpress.DataType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::MsgExpress::DataType type() const;
  inline void set_type(::MsgExpress::DataType value);

  // repeated .MsgExpress.ConditionValue value = 3;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::MsgExpress::ConditionValue& value(int index) const;
  inline ::MsgExpress::ConditionValue* mutable_value(int index);
  inline ::MsgExpress::ConditionValue* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::ConditionValue >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::ConditionValue >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:MsgExpress.ConditionItem)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::MsgExpress::ConditionValue > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static ConditionItem* default_instance_;
};
// -------------------------------------------------------------------

class SimpleSubscription : public ::google::protobuf::Message {
 public:
  SimpleSubscription();
  virtual ~SimpleSubscription();

  SimpleSubscription(const SimpleSubscription& from);

  inline SimpleSubscription& operator=(const SimpleSubscription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleSubscription& default_instance();

  void Swap(SimpleSubscription* other);

  // implements Message ----------------------------------------------

  SimpleSubscription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleSubscription& from);
  void MergeFrom(const SimpleSubscription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 subid = 1;
  inline bool has_subid() const;
  inline void clear_subid();
  static const int kSubidFieldNumber = 1;
  inline ::google::protobuf::int32 subid() const;
  inline void set_subid(::google::protobuf::int32 value);

  // required int32 topic = 2;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 2;
  inline ::google::protobuf::int32 topic() const;
  inline void set_topic(::google::protobuf::int32 value);

  // repeated bytes submsg = 3;
  inline int submsg_size() const;
  inline void clear_submsg();
  static const int kSubmsgFieldNumber = 3;
  inline const ::std::string& submsg(int index) const;
  inline ::std::string* mutable_submsg(int index);
  inline void set_submsg(int index, const ::std::string& value);
  inline void set_submsg(int index, const char* value);
  inline void set_submsg(int index, const void* value, size_t size);
  inline ::std::string* add_submsg();
  inline void add_submsg(const ::std::string& value);
  inline void add_submsg(const char* value);
  inline void add_submsg(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& submsg() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_submsg();

  // optional int32 useraddr = 4 [default = 0];
  inline bool has_useraddr() const;
  inline void clear_useraddr();
  static const int kUseraddrFieldNumber = 4;
  inline ::google::protobuf::int32 useraddr() const;
  inline void set_useraddr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.SimpleSubscription)
 private:
  inline void set_has_subid();
  inline void clear_has_subid();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_useraddr();
  inline void clear_has_useraddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 subid_;
  ::google::protobuf::int32 topic_;
  ::google::protobuf::RepeatedPtrField< ::std::string> submsg_;
  ::google::protobuf::int32 useraddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static SimpleSubscription* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeData : public ::google::protobuf::Message {
 public:
  SubscribeData();
  virtual ~SubscribeData();

  SubscribeData(const SubscribeData& from);

  inline SubscribeData& operator=(const SubscribeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeData& default_instance();

  void Swap(SubscribeData* other);

  // implements Message ----------------------------------------------

  SubscribeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeData& from);
  void MergeFrom(const SubscribeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 subid = 1;
  inline bool has_subid() const;
  inline void clear_subid();
  static const int kSubidFieldNumber = 1;
  inline ::google::protobuf::int32 subid() const;
  inline void set_subid(::google::protobuf::int32 value);

  // required int32 topic = 2;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 2;
  inline ::google::protobuf::int32 topic() const;
  inline void set_topic(::google::protobuf::int32 value);

  // repeated .MsgExpress.DataItem condition = 3;
  inline int condition_size() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 3;
  inline const ::MsgExpress::DataItem& condition(int index) const;
  inline ::MsgExpress::DataItem* mutable_condition(int index);
  inline ::MsgExpress::DataItem* add_condition();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::DataItem >&
      condition() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::DataItem >*
      mutable_condition();

  // repeated .MsgExpress.ConditionItem excondition = 4;
  inline int excondition_size() const;
  inline void clear_excondition();
  static const int kExconditionFieldNumber = 4;
  inline const ::MsgExpress::ConditionItem& excondition(int index) const;
  inline ::MsgExpress::ConditionItem* mutable_excondition(int index);
  inline ::MsgExpress::ConditionItem* add_excondition();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::ConditionItem >&
      excondition() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::ConditionItem >*
      mutable_excondition();

  // repeated int32 index = 5;
  inline int index_size() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::int32 index(int index) const;
  inline void set_index(int index, ::google::protobuf::int32 value);
  inline void add_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_index();

  // optional int32 useraddr = 6 [default = 0];
  inline bool has_useraddr() const;
  inline void clear_useraddr();
  static const int kUseraddrFieldNumber = 6;
  inline ::google::protobuf::int32 useraddr() const;
  inline void set_useraddr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.SubscribeData)
 private:
  inline void set_has_subid();
  inline void clear_has_subid();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_useraddr();
  inline void clear_has_useraddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 subid_;
  ::google::protobuf::int32 topic_;
  ::google::protobuf::RepeatedPtrField< ::MsgExpress::DataItem > condition_;
  ::google::protobuf::RepeatedPtrField< ::MsgExpress::ConditionItem > excondition_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > index_;
  ::google::protobuf::int32 useraddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static SubscribeData* default_instance_;
};
// -------------------------------------------------------------------

class UnSubscribeData : public ::google::protobuf::Message {
 public:
  UnSubscribeData();
  virtual ~UnSubscribeData();

  UnSubscribeData(const UnSubscribeData& from);

  inline UnSubscribeData& operator=(const UnSubscribeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnSubscribeData& default_instance();

  void Swap(UnSubscribeData* other);

  // implements Message ----------------------------------------------

  UnSubscribeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnSubscribeData& from);
  void MergeFrom(const UnSubscribeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 subid = 1;
  inline bool has_subid() const;
  inline void clear_subid();
  static const int kSubidFieldNumber = 1;
  inline ::google::protobuf::int32 subid() const;
  inline void set_subid(::google::protobuf::int32 value);

  // optional int32 useraddr = 2 [default = 0];
  inline bool has_useraddr() const;
  inline void clear_useraddr();
  static const int kUseraddrFieldNumber = 2;
  inline ::google::protobuf::int32 useraddr() const;
  inline void set_useraddr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.UnSubscribeData)
 private:
  inline void set_has_subid();
  inline void clear_has_subid();
  inline void set_has_useraddr();
  inline void clear_has_useraddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 subid_;
  ::google::protobuf::int32 useraddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static UnSubscribeData* default_instance_;
};
// -------------------------------------------------------------------

class ComplexSubscribeData : public ::google::protobuf::Message {
 public:
  ComplexSubscribeData();
  virtual ~ComplexSubscribeData();

  ComplexSubscribeData(const ComplexSubscribeData& from);

  inline ComplexSubscribeData& operator=(const ComplexSubscribeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComplexSubscribeData& default_instance();

  void Swap(ComplexSubscribeData* other);

  // implements Message ----------------------------------------------

  ComplexSubscribeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComplexSubscribeData& from);
  void MergeFrom(const ComplexSubscribeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MsgExpress.UnSubscribeData unsub = 1;
  inline int unsub_size() const;
  inline void clear_unsub();
  static const int kUnsubFieldNumber = 1;
  inline const ::MsgExpress::UnSubscribeData& unsub(int index) const;
  inline ::MsgExpress::UnSubscribeData* mutable_unsub(int index);
  inline ::MsgExpress::UnSubscribeData* add_unsub();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::UnSubscribeData >&
      unsub() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::UnSubscribeData >*
      mutable_unsub();

  // repeated .MsgExpress.SubscribeData sub = 2;
  inline int sub_size() const;
  inline void clear_sub();
  static const int kSubFieldNumber = 2;
  inline const ::MsgExpress::SubscribeData& sub(int index) const;
  inline ::MsgExpress::SubscribeData* mutable_sub(int index);
  inline ::MsgExpress::SubscribeData* add_sub();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::SubscribeData >&
      sub() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::SubscribeData >*
      mutable_sub();

  // @@protoc_insertion_point(class_scope:MsgExpress.ComplexSubscribeData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MsgExpress::UnSubscribeData > unsub_;
  ::google::protobuf::RepeatedPtrField< ::MsgExpress::SubscribeData > sub_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static ComplexSubscribeData* default_instance_;
};
// -------------------------------------------------------------------

class PublishData : public ::google::protobuf::Message {
 public:
  PublishData();
  virtual ~PublishData();

  PublishData(const PublishData& from);

  inline PublishData& operator=(const PublishData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishData& default_instance();

  void Swap(PublishData* other);

  // implements Message ----------------------------------------------

  PublishData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishData& from);
  void MergeFrom(const PublishData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 topic = 1;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 1;
  inline ::google::protobuf::int32 topic() const;
  inline void set_topic(::google::protobuf::int32 value);

  // repeated .MsgExpress.DataItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::MsgExpress::DataItem& item(int index) const;
  inline ::MsgExpress::DataItem* mutable_item(int index);
  inline ::MsgExpress::DataItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::DataItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::DataItem >*
      mutable_item();

  // repeated int32 subid = 3;
  inline int subid_size() const;
  inline void clear_subid();
  static const int kSubidFieldNumber = 3;
  inline ::google::protobuf::int32 subid(int index) const;
  inline void set_subid(int index, ::google::protobuf::int32 value);
  inline void add_subid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      subid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_subid();

  // optional string uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional uint64 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.PublishData)
 private:
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MsgExpress::DataItem > item_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > subid_;
  ::std::string* uuid_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 topic_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static PublishData* default_instance_;
};
// -------------------------------------------------------------------

class TokenInfo : public ::google::protobuf::Message {
 public:
  TokenInfo();
  virtual ~TokenInfo();

  TokenInfo(const TokenInfo& from);

  inline TokenInfo& operator=(const TokenInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TokenInfo& default_instance();

  void Swap(TokenInfo* other);

  // implements Message ----------------------------------------------

  TokenInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TokenInfo& from);
  void MergeFrom(const TokenInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required int64 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.TokenInfo)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::int64 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static TokenInfo* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 packageType = 1;
  inline bool has_packagetype() const;
  inline void clear_packagetype();
  static const int kPackageTypeFieldNumber = 1;
  inline ::google::protobuf::int32 packagetype() const;
  inline void set_packagetype(::google::protobuf::int32 value);

  // optional int32 iszip = 2;
  inline bool has_iszip() const;
  inline void clear_iszip();
  static const int kIszipFieldNumber = 2;
  inline ::google::protobuf::int32 iszip() const;
  inline void set_iszip(::google::protobuf::int32 value);

  // optional int32 compratio = 3;
  inline bool has_compratio() const;
  inline void clear_compratio();
  static const int kCompratioFieldNumber = 3;
  inline ::google::protobuf::int32 compratio() const;
  inline void set_compratio(::google::protobuf::int32 value);

  // required int32 serialnum = 4;
  inline bool has_serialnum() const;
  inline void clear_serialnum();
  static const int kSerialnumFieldNumber = 4;
  inline ::google::protobuf::int32 serialnum() const;
  inline void set_serialnum(::google::protobuf::int32 value);

  // required int32 command = 5;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 5;
  inline ::google::protobuf::int32 command() const;
  inline void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgExpress.Header)
 private:
  inline void set_has_packagetype();
  inline void clear_has_packagetype();
  inline void set_has_iszip();
  inline void clear_has_iszip();
  inline void set_has_compratio();
  inline void clear_has_compratio();
  inline void set_has_serialnum();
  inline void clear_has_serialnum();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 packagetype_;
  ::google::protobuf::int32 iszip_;
  ::google::protobuf::int32 compratio_;
  ::google::protobuf::int32 serialnum_;
  ::google::protobuf::int32 command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Pack : public ::google::protobuf::Message {
 public:
  Pack();
  virtual ~Pack();

  Pack(const Pack& from);

  inline Pack& operator=(const Pack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pack& default_instance();

  void Swap(Pack* other);

  // implements Message ----------------------------------------------

  Pack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pack& from);
  void MergeFrom(const Pack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MsgExpress.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::MsgExpress::Header& header() const;
  inline ::MsgExpress::Header* mutable_header();
  inline ::MsgExpress::Header* release_header();
  inline void set_allocated_header(::MsgExpress::Header* header);

  // required bytes body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:MsgExpress.Pack)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MsgExpress::Header* header_;
  ::std::string* body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgexpress_2eproto();
  friend void protobuf_AssignDesc_msgexpress_2eproto();
  friend void protobuf_ShutdownFile_msgexpress_2eproto();

  void InitAsDefaultInstance();
  static Pack* default_instance_;
};
// ===================================================================


// ===================================================================

// ErrMessage

// required int32 errcode = 1;
inline bool ErrMessage::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrMessage::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrMessage::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrMessage::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 ErrMessage::errcode() const {
  return errcode_;
}
inline void ErrMessage::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
}

// required string errmsg = 2;
inline bool ErrMessage::has_errmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrMessage::set_has_errmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrMessage::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrMessage::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& ErrMessage::errmsg() const {
  return *errmsg_;
}
inline void ErrMessage::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void ErrMessage::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void ErrMessage::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ErrMessage::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  return errmsg_;
}
inline ::std::string* ErrMessage::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ErrMessage::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StartupApplication

// required string exefullname = 1;
inline bool StartupApplication::has_exefullname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartupApplication::set_has_exefullname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartupApplication::clear_has_exefullname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartupApplication::clear_exefullname() {
  if (exefullname_ != &::google::protobuf::internal::kEmptyString) {
    exefullname_->clear();
  }
  clear_has_exefullname();
}
inline const ::std::string& StartupApplication::exefullname() const {
  return *exefullname_;
}
inline void StartupApplication::set_exefullname(const ::std::string& value) {
  set_has_exefullname();
  if (exefullname_ == &::google::protobuf::internal::kEmptyString) {
    exefullname_ = new ::std::string;
  }
  exefullname_->assign(value);
}
inline void StartupApplication::set_exefullname(const char* value) {
  set_has_exefullname();
  if (exefullname_ == &::google::protobuf::internal::kEmptyString) {
    exefullname_ = new ::std::string;
  }
  exefullname_->assign(value);
}
inline void StartupApplication::set_exefullname(const char* value, size_t size) {
  set_has_exefullname();
  if (exefullname_ == &::google::protobuf::internal::kEmptyString) {
    exefullname_ = new ::std::string;
  }
  exefullname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StartupApplication::mutable_exefullname() {
  set_has_exefullname();
  if (exefullname_ == &::google::protobuf::internal::kEmptyString) {
    exefullname_ = new ::std::string;
  }
  return exefullname_;
}
inline ::std::string* StartupApplication::release_exefullname() {
  clear_has_exefullname();
  if (exefullname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exefullname_;
    exefullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StartupApplication::set_allocated_exefullname(::std::string* exefullname) {
  if (exefullname_ != &::google::protobuf::internal::kEmptyString) {
    delete exefullname_;
  }
  if (exefullname) {
    set_has_exefullname();
    exefullname_ = exefullname;
  } else {
    clear_has_exefullname();
    exefullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string args = 2;
inline int StartupApplication::args_size() const {
  return args_.size();
}
inline void StartupApplication::clear_args() {
  args_.Clear();
}
inline const ::std::string& StartupApplication::args(int index) const {
  return args_.Get(index);
}
inline ::std::string* StartupApplication::mutable_args(int index) {
  return args_.Mutable(index);
}
inline void StartupApplication::set_args(int index, const ::std::string& value) {
  args_.Mutable(index)->assign(value);
}
inline void StartupApplication::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
}
inline void StartupApplication::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StartupApplication::add_args() {
  return args_.Add();
}
inline void StartupApplication::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
}
inline void StartupApplication::add_args(const char* value) {
  args_.Add()->assign(value);
}
inline void StartupApplication::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StartupApplication::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StartupApplication::mutable_args() {
  return &args_;
}

// -------------------------------------------------------------------

// StopBroker

// optional string dummy = 1;
inline bool StopBroker::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopBroker::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopBroker::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopBroker::clear_dummy() {
  if (dummy_ != &::google::protobuf::internal::kEmptyString) {
    dummy_->clear();
  }
  clear_has_dummy();
}
inline const ::std::string& StopBroker::dummy() const {
  return *dummy_;
}
inline void StopBroker::set_dummy(const ::std::string& value) {
  set_has_dummy();
  if (dummy_ == &::google::protobuf::internal::kEmptyString) {
    dummy_ = new ::std::string;
  }
  dummy_->assign(value);
}
inline void StopBroker::set_dummy(const char* value) {
  set_has_dummy();
  if (dummy_ == &::google::protobuf::internal::kEmptyString) {
    dummy_ = new ::std::string;
  }
  dummy_->assign(value);
}
inline void StopBroker::set_dummy(const char* value, size_t size) {
  set_has_dummy();
  if (dummy_ == &::google::protobuf::internal::kEmptyString) {
    dummy_ = new ::std::string;
  }
  dummy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StopBroker::mutable_dummy() {
  set_has_dummy();
  if (dummy_ == &::google::protobuf::internal::kEmptyString) {
    dummy_ = new ::std::string;
  }
  return dummy_;
}
inline ::std::string* StopBroker::release_dummy() {
  clear_has_dummy();
  if (dummy_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dummy_;
    dummy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StopBroker::set_allocated_dummy(::std::string* dummy) {
  if (dummy_ != &::google::protobuf::internal::kEmptyString) {
    delete dummy_;
  }
  if (dummy) {
    set_has_dummy();
    dummy_ = dummy;
  } else {
    clear_has_dummy();
    dummy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CommonResponse

// required int32 retcode = 1;
inline bool CommonResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 CommonResponse::retcode() const {
  return retcode_;
}
inline void CommonResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional string msg = 2;
inline bool CommonResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CommonResponse::msg() const {
  return *msg_;
}
inline void CommonResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CommonResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CommonResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CommonResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommonResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginInfo

// optional int32 type = 1;
inline bool LoginInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LoginInfo::type() const {
  return type_;
}
inline void LoginInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string name = 2;
inline bool LoginInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LoginInfo::name() const {
  return *name_;
}
inline void LoginInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LoginInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LoginInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LoginInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 group = 3;
inline bool LoginInfo::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginInfo::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginInfo::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginInfo::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 LoginInfo::group() const {
  return group_;
}
inline void LoginInfo::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional string uuid = 4;
inline bool LoginInfo::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginInfo::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginInfo::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginInfo::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& LoginInfo::uuid() const {
  return *uuid_;
}
inline void LoginInfo::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void LoginInfo::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void LoginInfo::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInfo::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* LoginInfo::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string auth = 5;
inline bool LoginInfo::has_auth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginInfo::set_has_auth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginInfo::clear_has_auth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginInfo::clear_auth() {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    auth_->clear();
  }
  clear_has_auth();
}
inline const ::std::string& LoginInfo::auth() const {
  return *auth_;
}
inline void LoginInfo::set_auth(const ::std::string& value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
}
inline void LoginInfo::set_auth(const char* value) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(value);
}
inline void LoginInfo::set_auth(const char* value, size_t size) {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  auth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInfo::mutable_auth() {
  set_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    auth_ = new ::std::string;
  }
  return auth_;
}
inline ::std::string* LoginInfo::release_auth() {
  clear_has_auth();
  if (auth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auth_;
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginInfo::set_allocated_auth(::std::string* auth) {
  if (auth_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_;
  }
  if (auth) {
    set_has_auth();
    auth_ = auth;
  } else {
    clear_has_auth();
    auth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 starttime = 6;
inline bool LoginInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginInfo::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 LoginInfo::starttime() const {
  return starttime_;
}
inline void LoginInfo::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
}

// repeated int32 serviceid = 7;
inline int LoginInfo::serviceid_size() const {
  return serviceid_.size();
}
inline void LoginInfo::clear_serviceid() {
  serviceid_.Clear();
}
inline ::google::protobuf::int32 LoginInfo::serviceid(int index) const {
  return serviceid_.Get(index);
}
inline void LoginInfo::set_serviceid(int index, ::google::protobuf::int32 value) {
  serviceid_.Set(index, value);
}
inline void LoginInfo::add_serviceid(::google::protobuf::int32 value) {
  serviceid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LoginInfo::serviceid() const {
  return serviceid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LoginInfo::mutable_serviceid() {
  return &serviceid_;
}

// optional string ip = 8;
inline bool LoginInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LoginInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LoginInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LoginInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& LoginInfo::ip() const {
  return *ip_;
}
inline void LoginInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void LoginInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void LoginInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* LoginInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginResponse

// optional int32 addr = 1;
inline bool LoginResponse::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
inline ::google::protobuf::int32 LoginResponse::addr() const {
  return addr_;
}
inline void LoginResponse::set_addr(::google::protobuf::int32 value) {
  set_has_addr();
  addr_ = value;
}

// optional int64 brokertime = 2;
inline bool LoginResponse::has_brokertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_brokertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_brokertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_brokertime() {
  brokertime_ = GOOGLE_LONGLONG(0);
  clear_has_brokertime();
}
inline ::google::protobuf::int64 LoginResponse::brokertime() const {
  return brokertime_;
}
inline void LoginResponse::set_brokertime(::google::protobuf::int64 value) {
  set_has_brokertime();
  brokertime_ = value;
}

// -------------------------------------------------------------------

// Logout

// optional int32 reserve = 1;
inline bool Logout::has_reserve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Logout::set_has_reserve() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Logout::clear_has_reserve() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Logout::clear_reserve() {
  reserve_ = 0;
  clear_has_reserve();
}
inline ::google::protobuf::int32 Logout::reserve() const {
  return reserve_;
}
inline void Logout::set_reserve(::google::protobuf::int32 value) {
  set_has_reserve();
  reserve_ = value;
}

// -------------------------------------------------------------------

// GetAppList

// repeated int32 serviceid = 1;
inline int GetAppList::serviceid_size() const {
  return serviceid_.size();
}
inline void GetAppList::clear_serviceid() {
  serviceid_.Clear();
}
inline ::google::protobuf::int32 GetAppList::serviceid(int index) const {
  return serviceid_.Get(index);
}
inline void GetAppList::set_serviceid(int index, ::google::protobuf::int32 value) {
  serviceid_.Set(index, value);
}
inline void GetAppList::add_serviceid(::google::protobuf::int32 value) {
  serviceid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GetAppList::serviceid() const {
  return serviceid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GetAppList::mutable_serviceid() {
  return &serviceid_;
}

// -------------------------------------------------------------------

// GetAppInfo

// required int32 addr = 1;
inline bool GetAppInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAppInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAppInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAppInfo::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
inline ::google::protobuf::int32 GetAppInfo::addr() const {
  return addr_;
}
inline void GetAppInfo::set_addr(::google::protobuf::int32 value) {
  set_has_addr();
  addr_ = value;
}

// -------------------------------------------------------------------

// AppInfo

// required .MsgExpress.LoginInfo loginInfo = 1;
inline bool AppInfo::has_logininfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppInfo::set_has_logininfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppInfo::clear_has_logininfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppInfo::clear_logininfo() {
  if (logininfo_ != NULL) logininfo_->::MsgExpress::LoginInfo::Clear();
  clear_has_logininfo();
}
inline const ::MsgExpress::LoginInfo& AppInfo::logininfo() const {
  return logininfo_ != NULL ? *logininfo_ : *default_instance_->logininfo_;
}
inline ::MsgExpress::LoginInfo* AppInfo::mutable_logininfo() {
  set_has_logininfo();
  if (logininfo_ == NULL) logininfo_ = new ::MsgExpress::LoginInfo;
  return logininfo_;
}
inline ::MsgExpress::LoginInfo* AppInfo::release_logininfo() {
  clear_has_logininfo();
  ::MsgExpress::LoginInfo* temp = logininfo_;
  logininfo_ = NULL;
  return temp;
}
inline void AppInfo::set_allocated_logininfo(::MsgExpress::LoginInfo* logininfo) {
  delete logininfo_;
  logininfo_ = logininfo;
  if (logininfo) {
    set_has_logininfo();
  } else {
    clear_has_logininfo();
  }
}

// required int32 addr = 2;
inline bool AppInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppInfo::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
inline ::google::protobuf::int32 AppInfo::addr() const {
  return addr_;
}
inline void AppInfo::set_addr(::google::protobuf::int32 value) {
  set_has_addr();
  addr_ = value;
}

// optional int64 logintime = 3;
inline bool AppInfo::has_logintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppInfo::set_has_logintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppInfo::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppInfo::clear_logintime() {
  logintime_ = GOOGLE_LONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::int64 AppInfo::logintime() const {
  return logintime_;
}
inline void AppInfo::set_logintime(::google::protobuf::int64 value) {
  set_has_logintime();
  logintime_ = value;
}

// optional .MsgExpress.AppStatus status = 4;
inline bool AppInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::MsgExpress::AppStatus AppInfo::status() const {
  return static_cast< ::MsgExpress::AppStatus >(status_);
}
inline void AppInfo::set_status(::MsgExpress::AppStatus value) {
  assert(::MsgExpress::AppStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string token = 5;
inline bool AppInfo::has_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppInfo::set_has_token() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& AppInfo::token() const {
  return *token_;
}
inline void AppInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void AppInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void AppInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* AppInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateAppStatus

// required int32 addr = 1;
inline bool UpdateAppStatus::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateAppStatus::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateAppStatus::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateAppStatus::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
inline ::google::protobuf::int32 UpdateAppStatus::addr() const {
  return addr_;
}
inline void UpdateAppStatus::set_addr(::google::protobuf::int32 value) {
  set_has_addr();
  addr_ = value;
}

// required .MsgExpress.AppStatus status = 2;
inline bool UpdateAppStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateAppStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateAppStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateAppStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::MsgExpress::AppStatus UpdateAppStatus::status() const {
  return static_cast< ::MsgExpress::AppStatus >(status_);
}
inline void UpdateAppStatus::set_status(::MsgExpress::AppStatus value) {
  assert(::MsgExpress::AppStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// required string token = 3;
inline bool UpdateAppStatus::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateAppStatus::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateAppStatus::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateAppStatus::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& UpdateAppStatus::token() const {
  return *token_;
}
inline void UpdateAppStatus::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void UpdateAppStatus::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void UpdateAppStatus::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateAppStatus::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* UpdateAppStatus::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateAppStatus::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AppList

// repeated .MsgExpress.AppInfo appinfo = 1;
inline int AppList::appinfo_size() const {
  return appinfo_.size();
}
inline void AppList::clear_appinfo() {
  appinfo_.Clear();
}
inline const ::MsgExpress::AppInfo& AppList::appinfo(int index) const {
  return appinfo_.Get(index);
}
inline ::MsgExpress::AppInfo* AppList::mutable_appinfo(int index) {
  return appinfo_.Mutable(index);
}
inline ::MsgExpress::AppInfo* AppList::add_appinfo() {
  return appinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::AppInfo >&
AppList::appinfo() const {
  return appinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::AppInfo >*
AppList::mutable_appinfo() {
  return &appinfo_;
}

// -------------------------------------------------------------------

// AppServerList

// required int32 serviceid = 1;
inline bool AppServerList::has_serviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppServerList::set_has_serviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppServerList::clear_has_serviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppServerList::clear_serviceid() {
  serviceid_ = 0;
  clear_has_serviceid();
}
inline ::google::protobuf::int32 AppServerList::serviceid() const {
  return serviceid_;
}
inline void AppServerList::set_serviceid(::google::protobuf::int32 value) {
  set_has_serviceid();
  serviceid_ = value;
}

// repeated int32 addrs = 2;
inline int AppServerList::addrs_size() const {
  return addrs_.size();
}
inline void AppServerList::clear_addrs() {
  addrs_.Clear();
}
inline ::google::protobuf::int32 AppServerList::addrs(int index) const {
  return addrs_.Get(index);
}
inline void AppServerList::set_addrs(int index, ::google::protobuf::int32 value) {
  addrs_.Set(index, value);
}
inline void AppServerList::add_addrs(::google::protobuf::int32 value) {
  addrs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AppServerList::addrs() const {
  return addrs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AppServerList::mutable_addrs() {
  return &addrs_;
}

// required bool isMasterSlaveMode = 3;
inline bool AppServerList::has_ismasterslavemode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppServerList::set_has_ismasterslavemode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppServerList::clear_has_ismasterslavemode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppServerList::clear_ismasterslavemode() {
  ismasterslavemode_ = false;
  clear_has_ismasterslavemode();
}
inline bool AppServerList::ismasterslavemode() const {
  return ismasterslavemode_;
}
inline void AppServerList::set_ismasterslavemode(bool value) {
  set_has_ismasterslavemode();
  ismasterslavemode_ = value;
}

// required bool brokerIsMaster = 4;
inline bool AppServerList::has_brokerismaster() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppServerList::set_has_brokerismaster() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppServerList::clear_has_brokerismaster() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppServerList::clear_brokerismaster() {
  brokerismaster_ = false;
  clear_has_brokerismaster();
}
inline bool AppServerList::brokerismaster() const {
  return brokerismaster_;
}
inline void AppServerList::set_brokerismaster(bool value) {
  set_has_brokerismaster();
  brokerismaster_ = value;
}

// -------------------------------------------------------------------

// KickOffApp

// required int32 addr = 1;
inline bool KickOffApp::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickOffApp::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickOffApp::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickOffApp::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
inline ::google::protobuf::int32 KickOffApp::addr() const {
  return addr_;
}
inline void KickOffApp::set_addr(::google::protobuf::int32 value) {
  set_has_addr();
  addr_ = value;
}

// -------------------------------------------------------------------

// RestartApp

// required string uuid = 1;
inline bool RestartApp::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RestartApp::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RestartApp::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RestartApp::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& RestartApp::uuid() const {
  return *uuid_;
}
inline void RestartApp::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void RestartApp::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void RestartApp::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RestartApp::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* RestartApp::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RestartApp::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BrokerInfo

// optional int64 starttime = 1;
inline bool BrokerInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrokerInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrokerInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrokerInfo::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 BrokerInfo::starttime() const {
  return starttime_;
}
inline void BrokerInfo::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional int32 brokerid = 2;
inline bool BrokerInfo::has_brokerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrokerInfo::set_has_brokerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrokerInfo::clear_has_brokerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrokerInfo::clear_brokerid() {
  brokerid_ = 0;
  clear_has_brokerid();
}
inline ::google::protobuf::int32 BrokerInfo::brokerid() const {
  return brokerid_;
}
inline void BrokerInfo::set_brokerid(::google::protobuf::int32 value) {
  set_has_brokerid();
  brokerid_ = value;
}

// -------------------------------------------------------------------

// HeartBeat

// optional int32 cpu = 1;
inline bool HeartBeat::has_cpu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeat::set_has_cpu() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeat::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeat::clear_cpu() {
  cpu_ = 0;
  clear_has_cpu();
}
inline ::google::protobuf::int32 HeartBeat::cpu() const {
  return cpu_;
}
inline void HeartBeat::set_cpu(::google::protobuf::int32 value) {
  set_has_cpu();
  cpu_ = value;
}

// optional int32 topmemory = 2;
inline bool HeartBeat::has_topmemory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeat::set_has_topmemory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeat::clear_has_topmemory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeat::clear_topmemory() {
  topmemory_ = 0;
  clear_has_topmemory();
}
inline ::google::protobuf::int32 HeartBeat::topmemory() const {
  return topmemory_;
}
inline void HeartBeat::set_topmemory(::google::protobuf::int32 value) {
  set_has_topmemory();
  topmemory_ = value;
}

// optional int32 memory = 3;
inline bool HeartBeat::has_memory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeartBeat::set_has_memory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeartBeat::clear_has_memory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeartBeat::clear_memory() {
  memory_ = 0;
  clear_has_memory();
}
inline ::google::protobuf::int32 HeartBeat::memory() const {
  return memory_;
}
inline void HeartBeat::set_memory(::google::protobuf::int32 value) {
  set_has_memory();
  memory_ = value;
}

// optional int32 sendqueue = 4;
inline bool HeartBeat::has_sendqueue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeartBeat::set_has_sendqueue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeartBeat::clear_has_sendqueue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeartBeat::clear_sendqueue() {
  sendqueue_ = 0;
  clear_has_sendqueue();
}
inline ::google::protobuf::int32 HeartBeat::sendqueue() const {
  return sendqueue_;
}
inline void HeartBeat::set_sendqueue(::google::protobuf::int32 value) {
  set_has_sendqueue();
  sendqueue_ = value;
}

// optional int32 receivequeue = 5;
inline bool HeartBeat::has_receivequeue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeartBeat::set_has_receivequeue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeartBeat::clear_has_receivequeue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeartBeat::clear_receivequeue() {
  receivequeue_ = 0;
  clear_has_receivequeue();
}
inline ::google::protobuf::int32 HeartBeat::receivequeue() const {
  return receivequeue_;
}
inline void HeartBeat::set_receivequeue(::google::protobuf::int32 value) {
  set_has_receivequeue();
  receivequeue_ = value;
}

// optional int32 sendrequest = 6;
inline bool HeartBeat::has_sendrequest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeartBeat::set_has_sendrequest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeartBeat::clear_has_sendrequest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeartBeat::clear_sendrequest() {
  sendrequest_ = 0;
  clear_has_sendrequest();
}
inline ::google::protobuf::int32 HeartBeat::sendrequest() const {
  return sendrequest_;
}
inline void HeartBeat::set_sendrequest(::google::protobuf::int32 value) {
  set_has_sendrequest();
  sendrequest_ = value;
}

// optional int32 recvrequest = 7;
inline bool HeartBeat::has_recvrequest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeartBeat::set_has_recvrequest() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeartBeat::clear_has_recvrequest() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeartBeat::clear_recvrequest() {
  recvrequest_ = 0;
  clear_has_recvrequest();
}
inline ::google::protobuf::int32 HeartBeat::recvrequest() const {
  return recvrequest_;
}
inline void HeartBeat::set_recvrequest(::google::protobuf::int32 value) {
  set_has_recvrequest();
  recvrequest_ = value;
}

// optional int32 sendresponse = 8;
inline bool HeartBeat::has_sendresponse() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HeartBeat::set_has_sendresponse() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HeartBeat::clear_has_sendresponse() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HeartBeat::clear_sendresponse() {
  sendresponse_ = 0;
  clear_has_sendresponse();
}
inline ::google::protobuf::int32 HeartBeat::sendresponse() const {
  return sendresponse_;
}
inline void HeartBeat::set_sendresponse(::google::protobuf::int32 value) {
  set_has_sendresponse();
  sendresponse_ = value;
}

// optional int32 recvresponse = 9;
inline bool HeartBeat::has_recvresponse() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HeartBeat::set_has_recvresponse() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HeartBeat::clear_has_recvresponse() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HeartBeat::clear_recvresponse() {
  recvresponse_ = 0;
  clear_has_recvresponse();
}
inline ::google::protobuf::int32 HeartBeat::recvresponse() const {
  return recvresponse_;
}
inline void HeartBeat::set_recvresponse(::google::protobuf::int32 value) {
  set_has_recvresponse();
  recvresponse_ = value;
}

// optional int32 sendpub = 10;
inline bool HeartBeat::has_sendpub() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HeartBeat::set_has_sendpub() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HeartBeat::clear_has_sendpub() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HeartBeat::clear_sendpub() {
  sendpub_ = 0;
  clear_has_sendpub();
}
inline ::google::protobuf::int32 HeartBeat::sendpub() const {
  return sendpub_;
}
inline void HeartBeat::set_sendpub(::google::protobuf::int32 value) {
  set_has_sendpub();
  sendpub_ = value;
}

// optional int32 recvpub = 11;
inline bool HeartBeat::has_recvpub() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HeartBeat::set_has_recvpub() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HeartBeat::clear_has_recvpub() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HeartBeat::clear_recvpub() {
  recvpub_ = 0;
  clear_has_recvpub();
}
inline ::google::protobuf::int32 HeartBeat::recvpub() const {
  return recvpub_;
}
inline void HeartBeat::set_recvpub(::google::protobuf::int32 value) {
  set_has_recvpub();
  recvpub_ = value;
}

// optional int64 servertime = 12;
inline bool HeartBeat::has_servertime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HeartBeat::set_has_servertime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HeartBeat::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HeartBeat::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(0);
  clear_has_servertime();
}
inline ::google::protobuf::int64 HeartBeat::servertime() const {
  return servertime_;
}
inline void HeartBeat::set_servertime(::google::protobuf::int64 value) {
  set_has_servertime();
  servertime_ = value;
}

// -------------------------------------------------------------------

// HeartBeatResponse

// required int32 retcode = 1;
inline bool HeartBeatResponse::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatResponse::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatResponse::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatResponse::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 HeartBeatResponse::retcode() const {
  return retcode_;
}
inline void HeartBeatResponse::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional int64 servertime = 2;
inline bool HeartBeatResponse::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeatResponse::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeatResponse::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeatResponse::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(0);
  clear_has_servertime();
}
inline ::google::protobuf::int64 HeartBeatResponse::servertime() const {
  return servertime_;
}
inline void HeartBeatResponse::set_servertime(::google::protobuf::int64 value) {
  set_has_servertime();
  servertime_ = value;
}

// optional int64 brokertime = 3;
inline bool HeartBeatResponse::has_brokertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeartBeatResponse::set_has_brokertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeartBeatResponse::clear_has_brokertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeartBeatResponse::clear_brokertime() {
  brokertime_ = GOOGLE_LONGLONG(0);
  clear_has_brokertime();
}
inline ::google::protobuf::int64 HeartBeatResponse::brokertime() const {
  return brokertime_;
}
inline void HeartBeatResponse::set_brokertime(::google::protobuf::int64 value) {
  set_has_brokertime();
  brokertime_ = value;
}

// -------------------------------------------------------------------

// Complex

// required int64 a = 1;
inline bool Complex::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Complex::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Complex::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Complex::clear_a() {
  a_ = GOOGLE_LONGLONG(0);
  clear_has_a();
}
inline ::google::protobuf::int64 Complex::a() const {
  return a_;
}
inline void Complex::set_a(::google::protobuf::int64 value) {
  set_has_a();
  a_ = value;
}

// required bytes b = 2;
inline bool Complex::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Complex::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Complex::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Complex::clear_b() {
  if (b_ != &::google::protobuf::internal::kEmptyString) {
    b_->clear();
  }
  clear_has_b();
}
inline const ::std::string& Complex::b() const {
  return *b_;
}
inline void Complex::set_b(const ::std::string& value) {
  set_has_b();
  if (b_ == &::google::protobuf::internal::kEmptyString) {
    b_ = new ::std::string;
  }
  b_->assign(value);
}
inline void Complex::set_b(const char* value) {
  set_has_b();
  if (b_ == &::google::protobuf::internal::kEmptyString) {
    b_ = new ::std::string;
  }
  b_->assign(value);
}
inline void Complex::set_b(const void* value, size_t size) {
  set_has_b();
  if (b_ == &::google::protobuf::internal::kEmptyString) {
    b_ = new ::std::string;
  }
  b_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Complex::mutable_b() {
  set_has_b();
  if (b_ == &::google::protobuf::internal::kEmptyString) {
    b_ = new ::std::string;
  }
  return b_;
}
inline ::std::string* Complex::release_b() {
  clear_has_b();
  if (b_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = b_;
    b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Complex::set_allocated_b(::std::string* b) {
  if (b_ != &::google::protobuf::internal::kEmptyString) {
    delete b_;
  }
  if (b) {
    set_has_b();
    b_ = b;
  } else {
    clear_has_b();
    b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataItem

// required int32 key = 1;
inline bool DataItem::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataItem::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataItem::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 DataItem::key() const {
  return key_;
}
inline void DataItem::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required .MsgExpress.DataType type = 2;
inline bool DataItem::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataItem::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataItem::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MsgExpress::DataType DataItem::type() const {
  return static_cast< ::MsgExpress::DataType >(type_);
}
inline void DataItem::set_type(::MsgExpress::DataType value) {
  assert(::MsgExpress::DataType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated bytes value = 3;
inline int DataItem::value_size() const {
  return value_.size();
}
inline void DataItem::clear_value() {
  value_.Clear();
}
inline const ::std::string& DataItem::value(int index) const {
  return value_.Get(index);
}
inline ::std::string* DataItem::mutable_value(int index) {
  return value_.Mutable(index);
}
inline void DataItem::set_value(int index, const ::std::string& value) {
  value_.Mutable(index)->assign(value);
}
inline void DataItem::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
}
inline void DataItem::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataItem::add_value() {
  return value_.Add();
}
inline void DataItem::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
}
inline void DataItem::add_value(const char* value) {
  value_.Add()->assign(value);
}
inline void DataItem::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataItem::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataItem::mutable_value() {
  return &value_;
}

// repeated string strVal = 4;
inline int DataItem::strval_size() const {
  return strval_.size();
}
inline void DataItem::clear_strval() {
  strval_.Clear();
}
inline const ::std::string& DataItem::strval(int index) const {
  return strval_.Get(index);
}
inline ::std::string* DataItem::mutable_strval(int index) {
  return strval_.Mutable(index);
}
inline void DataItem::set_strval(int index, const ::std::string& value) {
  strval_.Mutable(index)->assign(value);
}
inline void DataItem::set_strval(int index, const char* value) {
  strval_.Mutable(index)->assign(value);
}
inline void DataItem::set_strval(int index, const char* value, size_t size) {
  strval_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataItem::add_strval() {
  return strval_.Add();
}
inline void DataItem::add_strval(const ::std::string& value) {
  strval_.Add()->assign(value);
}
inline void DataItem::add_strval(const char* value) {
  strval_.Add()->assign(value);
}
inline void DataItem::add_strval(const char* value, size_t size) {
  strval_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataItem::strval() const {
  return strval_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataItem::mutable_strval() {
  return &strval_;
}

// repeated int32 iVal = 5;
inline int DataItem::ival_size() const {
  return ival_.size();
}
inline void DataItem::clear_ival() {
  ival_.Clear();
}
inline ::google::protobuf::int32 DataItem::ival(int index) const {
  return ival_.Get(index);
}
inline void DataItem::set_ival(int index, ::google::protobuf::int32 value) {
  ival_.Set(index, value);
}
inline void DataItem::add_ival(::google::protobuf::int32 value) {
  ival_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DataItem::ival() const {
  return ival_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DataItem::mutable_ival() {
  return &ival_;
}

// repeated uint32 uiVal = 6;
inline int DataItem::uival_size() const {
  return uival_.size();
}
inline void DataItem::clear_uival() {
  uival_.Clear();
}
inline ::google::protobuf::uint32 DataItem::uival(int index) const {
  return uival_.Get(index);
}
inline void DataItem::set_uival(int index, ::google::protobuf::uint32 value) {
  uival_.Set(index, value);
}
inline void DataItem::add_uival(::google::protobuf::uint32 value) {
  uival_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DataItem::uival() const {
  return uival_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DataItem::mutable_uival() {
  return &uival_;
}

// repeated int64 lVal = 7;
inline int DataItem::lval_size() const {
  return lval_.size();
}
inline void DataItem::clear_lval() {
  lval_.Clear();
}
inline ::google::protobuf::int64 DataItem::lval(int index) const {
  return lval_.Get(index);
}
inline void DataItem::set_lval(int index, ::google::protobuf::int64 value) {
  lval_.Set(index, value);
}
inline void DataItem::add_lval(::google::protobuf::int64 value) {
  lval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DataItem::lval() const {
  return lval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DataItem::mutable_lval() {
  return &lval_;
}

// repeated uint64 ulVal = 8;
inline int DataItem::ulval_size() const {
  return ulval_.size();
}
inline void DataItem::clear_ulval() {
  ulval_.Clear();
}
inline ::google::protobuf::uint64 DataItem::ulval(int index) const {
  return ulval_.Get(index);
}
inline void DataItem::set_ulval(int index, ::google::protobuf::uint64 value) {
  ulval_.Set(index, value);
}
inline void DataItem::add_ulval(::google::protobuf::uint64 value) {
  ulval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DataItem::ulval() const {
  return ulval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DataItem::mutable_ulval() {
  return &ulval_;
}

// repeated float fVal = 9;
inline int DataItem::fval_size() const {
  return fval_.size();
}
inline void DataItem::clear_fval() {
  fval_.Clear();
}
inline float DataItem::fval(int index) const {
  return fval_.Get(index);
}
inline void DataItem::set_fval(int index, float value) {
  fval_.Set(index, value);
}
inline void DataItem::add_fval(float value) {
  fval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DataItem::fval() const {
  return fval_;
}
inline ::google::protobuf::RepeatedField< float >*
DataItem::mutable_fval() {
  return &fval_;
}

// repeated double dVal = 10;
inline int DataItem::dval_size() const {
  return dval_.size();
}
inline void DataItem::clear_dval() {
  dval_.Clear();
}
inline double DataItem::dval(int index) const {
  return dval_.Get(index);
}
inline void DataItem::set_dval(int index, double value) {
  dval_.Set(index, value);
}
inline void DataItem::add_dval(double value) {
  dval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
DataItem::dval() const {
  return dval_;
}
inline ::google::protobuf::RepeatedField< double >*
DataItem::mutable_dval() {
  return &dval_;
}

// repeated bool bVal = 11;
inline int DataItem::bval_size() const {
  return bval_.size();
}
inline void DataItem::clear_bval() {
  bval_.Clear();
}
inline bool DataItem::bval(int index) const {
  return bval_.Get(index);
}
inline void DataItem::set_bval(int index, bool value) {
  bval_.Set(index, value);
}
inline void DataItem::add_bval(bool value) {
  bval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
DataItem::bval() const {
  return bval_;
}
inline ::google::protobuf::RepeatedField< bool >*
DataItem::mutable_bval() {
  return &bval_;
}

// repeated bytes rawVal = 12;
inline int DataItem::rawval_size() const {
  return rawval_.size();
}
inline void DataItem::clear_rawval() {
  rawval_.Clear();
}
inline const ::std::string& DataItem::rawval(int index) const {
  return rawval_.Get(index);
}
inline ::std::string* DataItem::mutable_rawval(int index) {
  return rawval_.Mutable(index);
}
inline void DataItem::set_rawval(int index, const ::std::string& value) {
  rawval_.Mutable(index)->assign(value);
}
inline void DataItem::set_rawval(int index, const char* value) {
  rawval_.Mutable(index)->assign(value);
}
inline void DataItem::set_rawval(int index, const void* value, size_t size) {
  rawval_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataItem::add_rawval() {
  return rawval_.Add();
}
inline void DataItem::add_rawval(const ::std::string& value) {
  rawval_.Add()->assign(value);
}
inline void DataItem::add_rawval(const char* value) {
  rawval_.Add()->assign(value);
}
inline void DataItem::add_rawval(const void* value, size_t size) {
  rawval_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataItem::rawval() const {
  return rawval_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataItem::mutable_rawval() {
  return &rawval_;
}

// repeated uint64 tVal = 13;
inline int DataItem::tval_size() const {
  return tval_.size();
}
inline void DataItem::clear_tval() {
  tval_.Clear();
}
inline ::google::protobuf::uint64 DataItem::tval(int index) const {
  return tval_.Get(index);
}
inline void DataItem::set_tval(int index, ::google::protobuf::uint64 value) {
  tval_.Set(index, value);
}
inline void DataItem::add_tval(::google::protobuf::uint64 value) {
  tval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DataItem::tval() const {
  return tval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DataItem::mutable_tval() {
  return &tval_;
}

// repeated .MsgExpress.Complex compVal = 14;
inline int DataItem::compval_size() const {
  return compval_.size();
}
inline void DataItem::clear_compval() {
  compval_.Clear();
}
inline const ::MsgExpress::Complex& DataItem::compval(int index) const {
  return compval_.Get(index);
}
inline ::MsgExpress::Complex* DataItem::mutable_compval(int index) {
  return compval_.Mutable(index);
}
inline ::MsgExpress::Complex* DataItem::add_compval() {
  return compval_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::Complex >&
DataItem::compval() const {
  return compval_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::Complex >*
DataItem::mutable_compval() {
  return &compval_;
}

// optional bool isPK = 20;
inline bool DataItem::has_ispk() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DataItem::set_has_ispk() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DataItem::clear_has_ispk() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DataItem::clear_ispk() {
  ispk_ = false;
  clear_has_ispk();
}
inline bool DataItem::ispk() const {
  return ispk_;
}
inline void DataItem::set_ispk(bool value) {
  set_has_ispk();
  ispk_ = value;
}

// -------------------------------------------------------------------

// ConditionValue

// required .MsgExpress.Operator operator = 1;
inline bool ConditionValue::has_operator_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConditionValue::set_has_operator_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConditionValue::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConditionValue::clear_operator_() {
  operator__ = 1;
  clear_has_operator_();
}
inline ::MsgExpress::Operator ConditionValue::operator_() const {
  return static_cast< ::MsgExpress::Operator >(operator__);
}
inline void ConditionValue::set_operator_(::MsgExpress::Operator value) {
  assert(::MsgExpress::Operator_IsValid(value));
  set_has_operator_();
  operator__ = value;
}

// required bytes value = 2;
inline bool ConditionValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConditionValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConditionValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConditionValue::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ConditionValue::value() const {
  return *value_;
}
inline void ConditionValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ConditionValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ConditionValue::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConditionValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* ConditionValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConditionValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ConditionItem

// required int32 key = 1;
inline bool ConditionItem::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConditionItem::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConditionItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConditionItem::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 ConditionItem::key() const {
  return key_;
}
inline void ConditionItem::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required .MsgExpress.DataType type = 2;
inline bool ConditionItem::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConditionItem::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConditionItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConditionItem::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MsgExpress::DataType ConditionItem::type() const {
  return static_cast< ::MsgExpress::DataType >(type_);
}
inline void ConditionItem::set_type(::MsgExpress::DataType value) {
  assert(::MsgExpress::DataType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .MsgExpress.ConditionValue value = 3;
inline int ConditionItem::value_size() const {
  return value_.size();
}
inline void ConditionItem::clear_value() {
  value_.Clear();
}
inline const ::MsgExpress::ConditionValue& ConditionItem::value(int index) const {
  return value_.Get(index);
}
inline ::MsgExpress::ConditionValue* ConditionItem::mutable_value(int index) {
  return value_.Mutable(index);
}
inline ::MsgExpress::ConditionValue* ConditionItem::add_value() {
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::ConditionValue >&
ConditionItem::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::ConditionValue >*
ConditionItem::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// SimpleSubscription

// required int32 subid = 1;
inline bool SimpleSubscription::has_subid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleSubscription::set_has_subid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleSubscription::clear_has_subid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleSubscription::clear_subid() {
  subid_ = 0;
  clear_has_subid();
}
inline ::google::protobuf::int32 SimpleSubscription::subid() const {
  return subid_;
}
inline void SimpleSubscription::set_subid(::google::protobuf::int32 value) {
  set_has_subid();
  subid_ = value;
}

// required int32 topic = 2;
inline bool SimpleSubscription::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleSubscription::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimpleSubscription::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimpleSubscription::clear_topic() {
  topic_ = 0;
  clear_has_topic();
}
inline ::google::protobuf::int32 SimpleSubscription::topic() const {
  return topic_;
}
inline void SimpleSubscription::set_topic(::google::protobuf::int32 value) {
  set_has_topic();
  topic_ = value;
}

// repeated bytes submsg = 3;
inline int SimpleSubscription::submsg_size() const {
  return submsg_.size();
}
inline void SimpleSubscription::clear_submsg() {
  submsg_.Clear();
}
inline const ::std::string& SimpleSubscription::submsg(int index) const {
  return submsg_.Get(index);
}
inline ::std::string* SimpleSubscription::mutable_submsg(int index) {
  return submsg_.Mutable(index);
}
inline void SimpleSubscription::set_submsg(int index, const ::std::string& value) {
  submsg_.Mutable(index)->assign(value);
}
inline void SimpleSubscription::set_submsg(int index, const char* value) {
  submsg_.Mutable(index)->assign(value);
}
inline void SimpleSubscription::set_submsg(int index, const void* value, size_t size) {
  submsg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleSubscription::add_submsg() {
  return submsg_.Add();
}
inline void SimpleSubscription::add_submsg(const ::std::string& value) {
  submsg_.Add()->assign(value);
}
inline void SimpleSubscription::add_submsg(const char* value) {
  submsg_.Add()->assign(value);
}
inline void SimpleSubscription::add_submsg(const void* value, size_t size) {
  submsg_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SimpleSubscription::submsg() const {
  return submsg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SimpleSubscription::mutable_submsg() {
  return &submsg_;
}

// optional int32 useraddr = 4 [default = 0];
inline bool SimpleSubscription::has_useraddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimpleSubscription::set_has_useraddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimpleSubscription::clear_has_useraddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimpleSubscription::clear_useraddr() {
  useraddr_ = 0;
  clear_has_useraddr();
}
inline ::google::protobuf::int32 SimpleSubscription::useraddr() const {
  return useraddr_;
}
inline void SimpleSubscription::set_useraddr(::google::protobuf::int32 value) {
  set_has_useraddr();
  useraddr_ = value;
}

// -------------------------------------------------------------------

// SubscribeData

// required int32 subid = 1;
inline bool SubscribeData::has_subid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeData::set_has_subid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeData::clear_has_subid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeData::clear_subid() {
  subid_ = 0;
  clear_has_subid();
}
inline ::google::protobuf::int32 SubscribeData::subid() const {
  return subid_;
}
inline void SubscribeData::set_subid(::google::protobuf::int32 value) {
  set_has_subid();
  subid_ = value;
}

// required int32 topic = 2;
inline bool SubscribeData::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeData::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeData::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeData::clear_topic() {
  topic_ = 0;
  clear_has_topic();
}
inline ::google::protobuf::int32 SubscribeData::topic() const {
  return topic_;
}
inline void SubscribeData::set_topic(::google::protobuf::int32 value) {
  set_has_topic();
  topic_ = value;
}

// repeated .MsgExpress.DataItem condition = 3;
inline int SubscribeData::condition_size() const {
  return condition_.size();
}
inline void SubscribeData::clear_condition() {
  condition_.Clear();
}
inline const ::MsgExpress::DataItem& SubscribeData::condition(int index) const {
  return condition_.Get(index);
}
inline ::MsgExpress::DataItem* SubscribeData::mutable_condition(int index) {
  return condition_.Mutable(index);
}
inline ::MsgExpress::DataItem* SubscribeData::add_condition() {
  return condition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::DataItem >&
SubscribeData::condition() const {
  return condition_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::DataItem >*
SubscribeData::mutable_condition() {
  return &condition_;
}

// repeated .MsgExpress.ConditionItem excondition = 4;
inline int SubscribeData::excondition_size() const {
  return excondition_.size();
}
inline void SubscribeData::clear_excondition() {
  excondition_.Clear();
}
inline const ::MsgExpress::ConditionItem& SubscribeData::excondition(int index) const {
  return excondition_.Get(index);
}
inline ::MsgExpress::ConditionItem* SubscribeData::mutable_excondition(int index) {
  return excondition_.Mutable(index);
}
inline ::MsgExpress::ConditionItem* SubscribeData::add_excondition() {
  return excondition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::ConditionItem >&
SubscribeData::excondition() const {
  return excondition_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::ConditionItem >*
SubscribeData::mutable_excondition() {
  return &excondition_;
}

// repeated int32 index = 5;
inline int SubscribeData::index_size() const {
  return index_.size();
}
inline void SubscribeData::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::int32 SubscribeData::index(int index) const {
  return index_.Get(index);
}
inline void SubscribeData::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
}
inline void SubscribeData::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SubscribeData::index() const {
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SubscribeData::mutable_index() {
  return &index_;
}

// optional int32 useraddr = 6 [default = 0];
inline bool SubscribeData::has_useraddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SubscribeData::set_has_useraddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SubscribeData::clear_has_useraddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SubscribeData::clear_useraddr() {
  useraddr_ = 0;
  clear_has_useraddr();
}
inline ::google::protobuf::int32 SubscribeData::useraddr() const {
  return useraddr_;
}
inline void SubscribeData::set_useraddr(::google::protobuf::int32 value) {
  set_has_useraddr();
  useraddr_ = value;
}

// -------------------------------------------------------------------

// UnSubscribeData

// required int32 subid = 1;
inline bool UnSubscribeData::has_subid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnSubscribeData::set_has_subid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnSubscribeData::clear_has_subid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnSubscribeData::clear_subid() {
  subid_ = 0;
  clear_has_subid();
}
inline ::google::protobuf::int32 UnSubscribeData::subid() const {
  return subid_;
}
inline void UnSubscribeData::set_subid(::google::protobuf::int32 value) {
  set_has_subid();
  subid_ = value;
}

// optional int32 useraddr = 2 [default = 0];
inline bool UnSubscribeData::has_useraddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnSubscribeData::set_has_useraddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnSubscribeData::clear_has_useraddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnSubscribeData::clear_useraddr() {
  useraddr_ = 0;
  clear_has_useraddr();
}
inline ::google::protobuf::int32 UnSubscribeData::useraddr() const {
  return useraddr_;
}
inline void UnSubscribeData::set_useraddr(::google::protobuf::int32 value) {
  set_has_useraddr();
  useraddr_ = value;
}

// -------------------------------------------------------------------

// ComplexSubscribeData

// repeated .MsgExpress.UnSubscribeData unsub = 1;
inline int ComplexSubscribeData::unsub_size() const {
  return unsub_.size();
}
inline void ComplexSubscribeData::clear_unsub() {
  unsub_.Clear();
}
inline const ::MsgExpress::UnSubscribeData& ComplexSubscribeData::unsub(int index) const {
  return unsub_.Get(index);
}
inline ::MsgExpress::UnSubscribeData* ComplexSubscribeData::mutable_unsub(int index) {
  return unsub_.Mutable(index);
}
inline ::MsgExpress::UnSubscribeData* ComplexSubscribeData::add_unsub() {
  return unsub_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::UnSubscribeData >&
ComplexSubscribeData::unsub() const {
  return unsub_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::UnSubscribeData >*
ComplexSubscribeData::mutable_unsub() {
  return &unsub_;
}

// repeated .MsgExpress.SubscribeData sub = 2;
inline int ComplexSubscribeData::sub_size() const {
  return sub_.size();
}
inline void ComplexSubscribeData::clear_sub() {
  sub_.Clear();
}
inline const ::MsgExpress::SubscribeData& ComplexSubscribeData::sub(int index) const {
  return sub_.Get(index);
}
inline ::MsgExpress::SubscribeData* ComplexSubscribeData::mutable_sub(int index) {
  return sub_.Mutable(index);
}
inline ::MsgExpress::SubscribeData* ComplexSubscribeData::add_sub() {
  return sub_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::SubscribeData >&
ComplexSubscribeData::sub() const {
  return sub_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::SubscribeData >*
ComplexSubscribeData::mutable_sub() {
  return &sub_;
}

// -------------------------------------------------------------------

// PublishData

// required int32 topic = 1;
inline bool PublishData::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishData::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishData::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishData::clear_topic() {
  topic_ = 0;
  clear_has_topic();
}
inline ::google::protobuf::int32 PublishData::topic() const {
  return topic_;
}
inline void PublishData::set_topic(::google::protobuf::int32 value) {
  set_has_topic();
  topic_ = value;
}

// repeated .MsgExpress.DataItem item = 2;
inline int PublishData::item_size() const {
  return item_.size();
}
inline void PublishData::clear_item() {
  item_.Clear();
}
inline const ::MsgExpress::DataItem& PublishData::item(int index) const {
  return item_.Get(index);
}
inline ::MsgExpress::DataItem* PublishData::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::MsgExpress::DataItem* PublishData::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgExpress::DataItem >&
PublishData::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgExpress::DataItem >*
PublishData::mutable_item() {
  return &item_;
}

// repeated int32 subid = 3;
inline int PublishData::subid_size() const {
  return subid_.size();
}
inline void PublishData::clear_subid() {
  subid_.Clear();
}
inline ::google::protobuf::int32 PublishData::subid(int index) const {
  return subid_.Get(index);
}
inline void PublishData::set_subid(int index, ::google::protobuf::int32 value) {
  subid_.Set(index, value);
}
inline void PublishData::add_subid(::google::protobuf::int32 value) {
  subid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PublishData::subid() const {
  return subid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PublishData::mutable_subid() {
  return &subid_;
}

// optional string uuid = 4;
inline bool PublishData::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PublishData::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PublishData::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PublishData::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& PublishData::uuid() const {
  return *uuid_;
}
inline void PublishData::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void PublishData::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void PublishData::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PublishData::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* PublishData::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PublishData::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 id = 5;
inline bool PublishData::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PublishData::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PublishData::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PublishData::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 PublishData::id() const {
  return id_;
}
inline void PublishData::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// TokenInfo

// required bytes token = 1;
inline bool TokenInfo::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TokenInfo::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TokenInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TokenInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& TokenInfo::token() const {
  return *token_;
}
inline void TokenInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void TokenInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void TokenInfo::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TokenInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* TokenInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TokenInfo::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 userid = 2;
inline bool TokenInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TokenInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TokenInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TokenInfo::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 TokenInfo::userid() const {
  return userid_;
}
inline void TokenInfo::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// Header

// required int32 packageType = 1;
inline bool Header::has_packagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_packagetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_packagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_packagetype() {
  packagetype_ = 0;
  clear_has_packagetype();
}
inline ::google::protobuf::int32 Header::packagetype() const {
  return packagetype_;
}
inline void Header::set_packagetype(::google::protobuf::int32 value) {
  set_has_packagetype();
  packagetype_ = value;
}

// optional int32 iszip = 2;
inline bool Header::has_iszip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_iszip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_iszip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_iszip() {
  iszip_ = 0;
  clear_has_iszip();
}
inline ::google::protobuf::int32 Header::iszip() const {
  return iszip_;
}
inline void Header::set_iszip(::google::protobuf::int32 value) {
  set_has_iszip();
  iszip_ = value;
}

// optional int32 compratio = 3;
inline bool Header::has_compratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_compratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_compratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_compratio() {
  compratio_ = 0;
  clear_has_compratio();
}
inline ::google::protobuf::int32 Header::compratio() const {
  return compratio_;
}
inline void Header::set_compratio(::google::protobuf::int32 value) {
  set_has_compratio();
  compratio_ = value;
}

// required int32 serialnum = 4;
inline bool Header::has_serialnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_serialnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_serialnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_serialnum() {
  serialnum_ = 0;
  clear_has_serialnum();
}
inline ::google::protobuf::int32 Header::serialnum() const {
  return serialnum_;
}
inline void Header::set_serialnum(::google::protobuf::int32 value) {
  set_has_serialnum();
  serialnum_ = value;
}

// required int32 command = 5;
inline bool Header::has_command() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_command() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_command() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::google::protobuf::int32 Header::command() const {
  return command_;
}
inline void Header::set_command(::google::protobuf::int32 value) {
  set_has_command();
  command_ = value;
}

// -------------------------------------------------------------------

// Pack

// required .MsgExpress.Header header = 1;
inline bool Pack::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pack::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pack::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pack::clear_header() {
  if (header_ != NULL) header_->::MsgExpress::Header::Clear();
  clear_has_header();
}
inline const ::MsgExpress::Header& Pack::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::MsgExpress::Header* Pack::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::MsgExpress::Header;
  return header_;
}
inline ::MsgExpress::Header* Pack::release_header() {
  clear_has_header();
  ::MsgExpress::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Pack::set_allocated_header(::MsgExpress::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// required bytes body = 2;
inline bool Pack::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pack::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pack::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pack::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& Pack::body() const {
  return *body_;
}
inline void Pack::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void Pack::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void Pack::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pack::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* Pack::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Pack::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgExpress

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgExpress::AppStatus>() {
  return ::MsgExpress::AppStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgExpress::DataType>() {
  return ::MsgExpress::DataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgExpress::Operator>() {
  return ::MsgExpress::Operator_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgexpress_2eproto__INCLUDED
